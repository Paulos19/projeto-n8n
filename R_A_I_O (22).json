{
  "name": "R.A.I.O",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "avaliacao-atendimento-webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        16660,
        2660
      ],
      "id": "c66c634d-5e33-4943-9a0b-29e6eaf5b284",
      "name": "Webhook Entrada",
      "webhookId": "d918ace9-297b-4fcf-809c-4e41c6db9c5d"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "746f8499-1e77-473a-b034-43164efaa7c7",
              "name": "data.remoteJid",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "e4482dd4-a6dc-4328-ad4d-8b7612008227",
              "name": "data.fromMe",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "boolean"
            },
            {
              "id": "2eb3c8b8-4bda-4d71-b8ab-c5a61333b3d9",
              "name": "data.id",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "d0ce3ce8-2dee-44af-b279-4faad7e1fbb6",
              "name": "data.text",
              "value": "={{ $json.body.data.message.conversation || $json.body.data.message.extendedTextMessage?.text }}",
              "type": "string"
            },
            {
              "id": "f67db619-80c0-4591-accf-e7d6e8a8d71f",
              "name": "data.source",
              "value": "={{ $json.body.data.source }}",
              "type": "string"
            },
            {
              "id": "a7862074-5f44-4fb7-9e84-0a34778523c7",
              "name": "evo.server_url",
              "value": "={{ $json.body.server_url }}",
              "type": "string"
            },
            {
              "id": "cbbc1ab6-6f6c-4cb3-bf2a-bf5a968140bc",
              "name": "evo.instance",
              "value": "={{ $json.body.instance }}",
              "type": "string"
            },
            {
              "id": "fa5b858d-8682-43d6-b143-908b6003dbcd",
              "name": "evo.apikey",
              "value": "={{ $json.body.apikey }}",
              "type": "string"
            },
            {
              "id": "9fb78ed9-936f-420b-8c90-6252d74afe59",
              "name": "data.messageType",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "8d7af79a-150b-4ed7-b37e-5b91e6833e5d",
              "name": "data.mediaUrl",
              "value": "={{ $json.body.data.message?.audioMessage?.mediaUrl || $json.body.data.message?.mediaUrl }}",
              "type": "string"
            },
            {
              "id": "a1b2c3d4-e5f6-4g7h-8i9j-0k1l2m3n4o5p",
              "name": "data.sender",
              "value": "={{ $json.body.sender }}",
              "type": "string"
            },
            {
              "id": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
              "name": "data.pushName",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
              "name": "data.messageTimestamp",
              "value": "={{ $json.body.data.messageTimestamp }}",
              "type": "number"
            },
            {
              "id": "d4e5f6g7-1111-2222-3333-777777777777", 
              "name": "store.ownerApiKey",
              "value": "={{ $json.body.storeOwnerApiKey }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        17180,
        2660
      ],
      "id": "9e0c92c5-98e2-4af4-9d14-6dbf795690b9",
      "name": "Processar Mensagem"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-owner-message",
              "leftValue": "={{ $json.data.fromMe }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7cdffdca-d0d2-4b39-9719-a656538c48d1",
      "name": "IF: Mensagem do Dono?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        17600,
        2040
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-setup-command",
              "leftValue": "={{ $json.data.text }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "/setup"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2f63550c-85bf-40ce-9ac3-50ee7644079e",
      "name": "IF: É comando /setup?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        17960,
        2040
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "existing_api_key",
        "key": "=registration_apikey:{{ $json.data.remoteJid }}",
        "options": {}
      },
      "id": "2e8c547e-989e-4733-bfdb-4b71a0ba3d70",
      "name": "Redis GET: Verificar Chave API Existente",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        18320,
        2020
      ],
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-key-exists",
              "leftValue": "={{ $json.existing_api_key }}",
              "operator": {
                "type": "any",
                "operation": "isEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "efd66216-1f93-4c84-a3a1-386efb59a93f",
      "name": "IF: Já Registrado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18660,
        2020
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: Já Registrado?').item.json.data.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Você já está configurado. Sua chave API está registrada."
            }
          ]
        },
        "options": {}
      },
      "id": "1c6aefbb-f524-4d54-b513-e23aaba7f15a",
      "name": "HTTP Request: Enviar Msg (Já Registrado)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19120,
        2000
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: É comando /setup?').item.json.data.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Para configurar, por favor envie seus dados no formato:\nNome Completo;Seu Email;Sua Senha;Seu CPF ou CNPJ"
            }
          ]
        },
        "options": {}
      },
      "id": "c0b8a733-9b66-4c86-ba9e-7193698b6ded",
      "name": "HTTP Request: Pedir Dados Cadastro",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        18820,
        2200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-reg-data",
              "leftValue": "={{ $json.data.text }}",
              "operator": {
                "type": "string",
                "operation": "contains"
              },
              "rightValue": ";"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ebf4a74b-cc4f-40af-8af9-a3b9f1cb886d",
      "name": "IF: É resposta de cadastro?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        17960,
        2280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-parse-error",
              "leftValue": "={{ $json.parse_error }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "14b021b5-99dc-4ae9-aa24-dab90b49b0b9",
      "name": "IF: Erro no Parse?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18900,
        2500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://projeto-n8n.vercel.app/api/auth/register",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.registration_data }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "306b08dd-5b14-4fba-a722-cb38ff287483",
      "name": "HTTP Request: Chamar API Register",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19180,
        2540
      ]
    },
    {
      "parameters": {
        "jsCode": "const response = $json; // $json é o objeto de resposta completo\nconst statusCode = $json.statusCode;\nlet body = {}; // Inicia como objeto vazio\n\n// Verifica se $json.body existe e se precisa ser parseado\nif ($json.body) {\n  if (typeof $json.body === 'string') {\n    try {\n      body = JSON.parse($json.body); // Tenta parsear se for string\n    } catch (e) {\n      console.error(\"Erro ao fazer parse do $json.body (string):\", e);\n      // Mantém body como {} se o parse falhar\n    }\n  } else if (typeof $json.body === 'object') {\n    body = $json.body; // Usa diretamente se já for objeto\n  }\n}\n\n// Garante que remoteJid seja buscado corretamente (verifique o nome do nó!)\nlet remoteJid = 'JID_DESCONHECIDO';\ntry {\n    // Use .first() pois o nó anterior pode ter múltiplas saídas em testes manuais\n    remoteJid = $('Code: Parse Dados Cadastro').first().json.remoteJid || remoteJid;\n} catch(e) {\n    console.error(\"Erro ao obter remoteJid do nó 'Code: Parse Dados Cadastro':\", e);\n}\n\n\nlet result = {\n  remoteJid: remoteJid,\n  registration_complete_flag: false,\n  final_message: 'Ocorreu um erro ao tentar registrar. Tente novamente mais tarde.',\n  webhookApiKey: null\n};\n\n// Usa as variáveis 'statusCode' e 'body' (que agora é garantido ser um objeto)\nif (statusCode === 201 && body.webhookApiKey) {\n  result.registration_complete_flag = true;\n  result.final_message = `Registro realizado com sucesso! Sua Webhook API Key é: ${body.webhookApiKey} | Guarde esta chave em segurança, ela será necessária para identificar suas requisições.`;\n  result.webhookApiKey = body.webhookApiKey;\n} else if (statusCode === 409) {\n  result.final_message = `Erro no registro: ${body.message || 'Email ou Identificador já cadastrado.'}`;\n} else if (statusCode === 400) {\n  result.final_message = `Erro no registro: ${body.message || 'Dados inválidos.'}`;\n} else {\n   result.final_message = `Erro no servidor de registro (Código: ${statusCode}). Tente novamente.`;\n}\n\nreturn [{ json: result }];"
      },
      "id": "e2a1ee19-9ba0-456f-8e3e-1effdcd1ec14",
      "name": "Code: Processar Resposta API",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        19440,
        2540
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-reg-ok",
              "leftValue": "={{ $json.registration_complete_flag }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "428223cb-7150-43f1-983f-07d1363a7f26",
      "name": "IF: Registro OK?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        19720,
        2540
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=registration_apikey:{{ $json.remoteJid }}",
        "value": "={{ $json.webhookApiKey }}"
      },
      "id": "f2473da1-44bf-4cb5-bb6a-b4c2d6f2e6ec",
      "name": "Redis SET: Salvar API Key",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20060,
        2520
      ],
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code: Processar Resposta API').item.json.final_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5d68a5ea-9d8c-446d-94d7-44d0ee17554b",
      "name": "HTTP Request: Enviar Msg (Sucesso)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20400,
        2520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.final_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0f34112c-0d62-45a5-8008-281d2b45d142",
      "name": "HTTP Request: Enviar Msg (Erro API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20060,
        2680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d7c8f2a1-e3b4-4d5a-a6f7-g8h9i0j1k2l3",
              "leftValue": "={{ $json.data.messageType }}",
              "rightValue": "audioMessage",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        17600,
        3260
      ],
      "id": "48447630-a80f-4276-a60a-1e3e0fa20e3d",
      "name": "Verificar se é Áudio"
    },
    {
      "parameters": {
        "url": "={{ $json.data.mediaUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        17820,
        2920
      ],
      "id": "aca7e553-d6cf-4868-9246-89bcd5021627",
      "name": "Baixar Arquivo de Áudio",
      "notes": "Baixa o áudio da mediaUrl para transcrição"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        18080,
        2920
      ],
      "id": "f766796e-3b0f-425c-b0c4-61c8dbf65c87",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1b2c3d4-new-data-object-fix",
              "name": "data",
              "type": "json",
              "value": "={{ ({ ...JSON.parse(JSON.stringify($('Processar Mensagem').item.json.data)), text: $('OpenAI').item.json.text, messageType: 'audio_transcribed', is_transcribed: true }) }}"
            },
            {
              "id": "e5f6g7h8-new-evo-object-fix",
              "name": "evo",
              "type": "json",
              "value": "={{ $('Processar Mensagem').item.json.evo }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        18380,
        2920
      ],
      "id": "6570a049-d2cf-4abd-83b0-e0e4bffbd792",
      "name": "Atualizar Mensagem com Transcrição"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "daa4b9b5-87a2-4f28-b4bd-ba88cc3ab4ed",
              "leftValue": "={{ $json.data.remoteJid }}",
              "rightValue": "@s.whatsapp.net",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        18240,
        3300
      ],
      "id": "a9597dac-c386-4744-bee4-9a221d8fd2c1",
      "name": "Filtrar Chats Individuais"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        18600,
        3300
      ],
      "id": "b548cbe7-8087-472a-bd35-d1da499413d0",
      "name": "Aguardar Mensagens",
      "webhookId": "24da4e40-c742-414e-91c5-ddb6ee1dfc83",
      "notes": "Aguarda 15 segundos coletando todas as mensagens recebidas neste período"
    },
    {
      "parameters": {
        "jsCode": "const messages = $input.all();\nconst groupedMessages = {};\nlet firstRemoteJid = null; \n\nconst getSafe = (obj, path, defaultValue = null) => {\n  return path.split('.').reduce((acc, key) => {\n    try {\n      return acc && acc[key] !== undefined ? acc[key] : defaultValue;\n    } catch (e) {\n      return defaultValue;\n    }\n  }, obj);\n};\n\nmessages.forEach(msg => {\n  try {\n    \n    const remoteJid = getSafe(msg, 'json.data.remoteJid');\n    if (!remoteJid) {\n      console.log('Mensagem sem remoteJid, ignorando:', msg);\n      return; \n    }\n    \n    if (!firstRemoteJid) firstRemoteJid = remoteJid;\n\n    const fromMe = getSafe(msg, 'json.data.fromMe', false);\n    let text = getSafe(msg, 'json.data.text', '');\n    const messageType = getSafe(msg, 'json.data.messageType', 'unknown');\n    const isTranscribed = getSafe(msg, 'json.data.is_transcribed', false);\n\n    if (messageType === 'audio' && !isTranscribed) {\n        text = '[MENSAGEM DE ÁUDIO NÃO TRANSCRITA]';\n    } else if (!text && messageType === 'audio_transcribed') {\n        text = '[TRANSCRIÇÃO VAZIA OU FALHOU]';\n    } else if (!text) {\n        text = '[MENSAGEM SEM TEXTO]';\n    }\n\n    const instance = getSafe(msg, 'json.evo.instance');\n    const pushName = getSafe(msg, 'json.data.pushName', 'Cliente');\n    const messageId = getSafe(msg, 'json.data.id');\n    const timestamp = getSafe(msg, 'json.data.messageTimestamp', Date.now() / 1000);\n\n    const sender = fromMe ? 'Vendedor' : 'Cliente';\n    const senderId = fromMe ? instance : remoteJid;\n\n    if (!groupedMessages[remoteJid]) {\n      groupedMessages[remoteJid] = {\n        messages: [],\n        senders: {},\n        sellers: {},\n        customers: {}\n      };\n    }\n\n    \n    if (fromMe && instance && !groupedMessages[remoteJid].sellers[instance]) {\n      groupedMessages[remoteJid].sellers[instance] = {\n        name: 'Vendedor (' + instance + ')',\n        instance: instance\n      };\n    }\n\n    \n    if (!fromMe && !groupedMessages[remoteJid].customers[remoteJid]) {\n      groupedMessages[remoteJid].customers[remoteJid] = {\n        name: pushName || 'Cliente',\n        number: remoteJid\n      };\n    }\n\n    \n    groupedMessages[remoteJid].messages.push({\n      text: text,\n      fromMe: fromMe,\n      sender: sender,\n      senderId: senderId,\n      timestamp: timestamp,\n      messageId: messageId,\n      messageType: messageType,\n      isTranscribed: isTranscribed,\n      rawData: msg.json\n    });\n  } catch (error) {\n    console.error('Erro ao processar mensagem:', error, 'Mensagem:', msg);\n  }\n});\n\n\nconst output = [];\nfor (const remoteJid in groupedMessages) {\n  try {\n    \n    if (Object.keys(groupedMessages[remoteJid].customers).length === 0 && remoteJid) {\n        groupedMessages[remoteJid].customers[remoteJid] = {\n            name: 'Cliente',\n            number: remoteJid\n        };\n    }\n\n    \n     if (Object.keys(groupedMessages[remoteJid].sellers).length === 0) {\n        \n        let defaultInstance = 'InstanciaPadrao';\n        const firstFromMeMsg = groupedMessages[remoteJid].messages.find(m => m.fromMe && m.rawData?.evo?.instance);\n        if (firstFromMeMsg) {\n            defaultInstance = firstFromMeMsg.rawData.evo.instance;\n        }\n        groupedMessages[remoteJid].sellers[defaultInstance] = {\n            name: `Vendedor (${defaultInstance})`,\n            instance: defaultInstance\n        };\n    }\n\n    output.push({\n      json: {\n        remoteJid: remoteJid,\n        messages: groupedMessages[remoteJid].messages,\n        senders: {\n          ...groupedMessages[remoteJid].sellers,\n          ...groupedMessages[remoteJid].customers\n        },\n        sellers: groupedMessages[remoteJid].sellers,\n        customers: groupedMessages[remoteJid].customers,\n        formattedMessages: groupedMessages[remoteJid].messages.map(msg => {\n          return {\n            sender: msg.sender,\n            senderId: msg.senderId,\n            text: msg.text,\n            timestamp: msg.timestamp,\n            messageId: msg.messageId,\n            messageType: msg.messageType\n          };\n        }),\n        conversationContext: {\n          seller: Object.values(groupedMessages[remoteJid].sellers)[0] || null,\n          customer: Object.values(groupedMessages[remoteJid].customers)[0] || null\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Erro ao formatar saída para remoteJid:', remoteJid, error);\n  }\n}\n\n\nif (output.length === 0 && firstRemoteJid) {\n    console.warn(`Nenhuma mensagem processada para ${firstRemoteJid}, criando saída padrão.`);\n    output.push({\n        json: {\n            remoteJid: firstRemoteJid,\n            messages: [],\n            senders: { [firstRemoteJid]: { name: 'Cliente', number: firstRemoteJid } },\n            sellers: {},\n            customers: { [firstRemoteJid]: { name: 'Cliente', number: firstRemoteJid } },\n            formattedMessages: [],\n            conversationContext: { seller: null, customer: { name: 'Cliente', number: firstRemoteJid } }\n        }\n    });\n}\n\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        18940,
        3300
      ],
      "id": "058c3319-f099-4b0f-ab5f-170682fac70f",
      "name": "Agrupar e Format Mensagens"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "existing_chat_object_string",
        "key": "=chat:{{ $('Agrupar e Format Mensagens').item.json.remoteJid }}:full",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        19280,
        3300
      ],
      "id": "604b02a6-7c8b-4a11-bb0a-25c976789858",
      "name": "Obter Histórico de Chat Existente",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const newMessagesBundle = $('Agrupar e Format Mensagens').item.json;\nconst currentBatchOfMessages = newMessagesBundle.messages || [];\nconst remoteJid = newMessagesBundle.remoteJid;\n\nlet historicMessagesArray = [];\n\nconst existingChatObjectString = $input.item.json.existing_chat_object_string;\n\nif (existingChatObjectString) {\n  try {\n    const existingChatObject = JSON.parse(existingChatObjectString);\n    if (existingChatObject && Array.isArray(existingChatObject.messages)) {\n      historicMessagesArray = existingChatObject.messages;\n    } else {\n      console.warn('Campo messages não encontrado ou não é array no objeto do Redis para: ' + remoteJid);\n    }\n  } catch (e) {\n    console.warn('Falha ao parsear objeto de chat existente do Redis para: ' + remoteJid, e);\n  }\n}\n\nconst combinedMessages = historicMessagesArray.concat(currentBatchOfMessages);\n\n\nconst uniqueMessages = [];\nconst seenIds = new Set();\nfor (const msg of combinedMessages) {\n  if (msg.messageId) {\n    if (!seenIds.has(msg.messageId)) {\n      uniqueMessages.push(msg);\n      seenIds.add(msg.messageId);\n    }\n  } else {\n    uniqueMessages.push(msg); \n  }\n}\n\n\nconst MAX_HISTORY_SIZE = 500; \nconst finalMessageArray = uniqueMessages.length > MAX_HISTORY_SIZE ? uniqueMessages.slice(-MAX_HISTORY_SIZE) : uniqueMessages;\n\nconst finalStorageObject = {\n    messages: finalMessageArray, \n    senders: newMessagesBundle.senders,\n    sellers: newMessagesBundle.sellers,\n    customers: newMessagesBundle.customers,\n    timestamp: Date.now()\n};\n\nreturn [{\n  json: {\n    remoteJid: remoteJid,\n    stringified_updated_storage_object: JSON.stringify(finalStorageObject)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        19700,
        3300
      ],
      "id": "a5e3f67b-2eaa-4d3a-8a01-5eb3bf2d9b4b",
      "name": "Anexar Novas Mensagens ao Histórico de Chat"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=chat:{{ $json.remoteJid }}:full",
        "value": "={{ $json.stringified_updated_storage_object }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20040,
        3300
      ],
      "id": "1173c86f-fc07-4685-aeb2-9e83e5251bc5",
      "name": "Armazenar Mensagens (Atualizado)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      },
      "notes": "Armazena todo o histórico da conversa (acumulado) com expiração de 24h (se configurado no Redis)"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "chat_data_raw_dashboard",
        "key": "=chat:{{ $('Armazenar Mensagens (Atualizado)').item.json.remoteJid }}:full",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20460,
        3320
      ],
      "id": "5765b559-e257-4c7b-a5c1-2a67a47d8565",
      "name": "Obter Conversa Completa p/ Dashboard",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatDataRaw = $json.chat_data_raw_dashboard;\nlet parsedChatData = { \n  messages: [],\n  sellers: {},\n  customers: {}\n};\n\n\ntry {\n  if (chatDataRaw && typeof chatDataRaw === 'string') {\n    parsedChatData = JSON.parse(chatDataRaw) || parsedChatData;\n  } else if (chatDataRaw && typeof chatDataRaw === 'object') {\n    parsedChatData = chatDataRaw;\n  }\n} catch (e) {\n  console.error(\"Error parsing chat data for dashboard:\", e);\n}\n\n\nif (!parsedChatData.messages) parsedChatData.messages = [];\nif (!parsedChatData.sellers) parsedChatData.sellers = {};\nif (!parsedChatData.customers) parsedChatData.customers = {};\n\n\nconst remoteJid = $('Armazenar Mensagens (Atualizado)').item.json.remoteJid;\n\nconst getDynamicName = (isFromMe, defaultName) => {\n    try {\n        if (isFromMe) {\n            return (parsedChatData.sellers && Object.values(parsedChatData.sellers)[0] ? \n                   Object.values(parsedChatData.sellers)[0].name : null) || defaultName;\n        } else {\n            return (parsedChatData.customers && Object.values(parsedChatData.customers)[0] ? \n                   Object.values(parsedChatData.customers)[0].name : null) || defaultName;\n        }\n    } catch (e) {\n        console.error(\"Error in getDynamicName for dashboard:\", e);\n        return defaultName;\n    }\n}\n\nconst conversationForIa = (parsedChatData.messages || []).map(msg => {\n  try {\n    const senderName = getDynamicName(msg.fromMe, msg.fromMe ? 'Vendedor' : 'Cliente');\n    let textContent = msg.text || '';\n    \n    if (msg.messageType === 'audio_transcribed' && msg.isTranscribed) {\n      textContent = msg.text;\n    } else if (msg.messageType === 'audio' && !msg.isTranscribed) {\n      textContent = '[MENSAGEM DE ÁUDIO]';\n    } else if (!msg.text && msg.messageType !== 'image' && \n               msg.messageType !== 'video' && msg.messageType !== 'sticker' && \n               msg.messageType !== 'document') {\n      textContent = '[MENSAGEM SEM TEXTO]';\n    }\n    \n    return `${senderName}: ${textContent}`;\n  } catch (e) {\n    console.error(\"Error processing message for dashboard IA:\", e, \"Message:\", msg);\n    return '[ERRO AO PROCESSAR MENSAGEM]';\n  }\n}).join('\\n');\n\nconst fullChatHistoryArray = (parsedChatData.messages || []).map(msg => {\n  try {\n    return {\n      sender: msg.fromMe ? 'Vendedor' : 'Cliente',\n      senderName: getDynamicName(msg.fromMe, msg.fromMe ? 'Vendedor' : 'Cliente'),\n      text: msg.text || (msg.messageType === 'audio' && !msg.isTranscribed ? '[AUDIO]' : \n            (msg.messageType !== 'conversation' && msg.messageType !== 'extendedTextMessage' && \n             msg.messageType !== 'audio_transcribed' ? `[${msg.messageType || 'MIDIA'}]` : \n             '[CONTEÚDO INDISPONÍVEL]')),\n      timestamp: msg.timestamp,\n      messageType: msg.messageType,\n      fromMe: msg.fromMe\n    };\n  } catch (e) {\n    console.error(\"Error formatting message for dashboard history:\", e);\n    return {\n      sender: 'Erro',\n      senderName: 'Erro',\n      text: '[ERRO AO FORMATAR MENSAGEM]',\n      timestamp: Date.now(),\n      messageType: 'error',\n      fromMe: false\n    };\n  }\n});\n\nreturn [{ \n  json: {\n    remoteJid: remoteJid,\n    conversation_for_ia: conversationForIa,\n    full_chat_history_array: fullChatHistoryArray,\n    raw_chat_data: parsedChatData \n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20680,
        3320
      ],
      "id": "356a2c6a-519c-425c-9af9-a166ff924327",
      "name": "Formatar Histórico p/ Dashboard e IA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você é um assistente de análise de conversas. Analise o seguinte histórico de chat:\nCONVERSA:\n{{ $json.conversation_for_ia }}\n\nCom base na conversa, gere um resumo conciso e identifique até 5 palavras-chave ou tópicos principais discutidos.\nRetorne APENAS um objeto JSON com as seguintes chaves:\n- \"resumo_chat\": (string) um parágrafo resumindo a conversa.\n- \"topicos_principais\": (array de strings) com as palavras-chave ou tópicos.\n\nExemplo de saída:\n{\n  \"resumo_chat\": \"O cliente entrou em contato para saber sobre o status do pedido X e o vendedor forneceu informações de rastreamento.\",\n  \"topicos_principais\": [\"status do pedido\", \"rastreamento\", \"pedido X\"]\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        20980,
        3320
      ],
      "id": "1c6bf14a-ec57-43e5-889b-53bf1660b330",
      "name": "Analisar Chat p/ Dashboard (IA)"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        20960,
        3500
      ],
      "id": "94607a38-5e77-4f38-982b-c538f0b45454",
      "name": "OpenAI Chat Model (Dashboard)",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const agentOutputString = items[0].json.output; \nconst previousData = $('Formatar Histórico p/ Dashboard e IA').item.json;\nlet agentJson = {};\n\ntry {\n  let cleanJsonString = agentOutputString.replace(/^```json\\n?/, '').replace(/\\n?```$/, '');\n  agentJson = JSON.parse(cleanJsonString);\n} catch (e) {\n  console.error(\"Erro ao parsear JSON do agente para dashboard:\", e, \"String Original:\", agentOutputString);\n  agentJson = {\n    resumo_chat: \"Não foi possível gerar o resumo do chat.\",\n    topicos_principais: []\n  };\n}\n\n\nlet customerName = 'Desconhecido';\nlet customerNumber = previousData.remoteJid || 'Desconhecido'; \n\ntry {\n  \n  if (previousData.raw_chat_data && previousData.raw_chat_data.customers && Object.keys(previousData.raw_chat_data.customers).length > 0) {\n    \n    const firstCustomer = Object.values(previousData.raw_chat_data.customers)[0];\n    if (firstCustomer) {\n      customerName = firstCustomer.name || customerName; \n      customerNumber = firstCustomer.number || customerNumber; \n    }\n  }\n} catch (e) {\n  console.error(\"Erro ao extrair dados do cliente:\", e);\n  \n}\n\nconst customerData = {\n  name: customerName,\n  number: customerNumber\n};\n\n\n\n\n\nconst conversationObject = {\n  remoteJid: previousData.remoteJid || 'JID_DESCONHECIDO', \n  chat_history: previousData.full_chat_history_array || [], \n  analysis: {\n    summary: agentJson.resumo_chat || \"Resumo não fornecido pela IA.\",\n    keywords: Array.isArray(agentJson.topicos_principais) ? agentJson.topicos_principais : []\n  },\n  customer: customerData, \n  timestamp: new Date().toISOString()\n  \n};\n\n\nif (!conversationObject.remoteJid || conversationObject.remoteJid === 'JID_DESCONHECIDO') {\n  console.error(\"Objeto de conversa final sem remoteJid válido:\", conversationObject);\n  \n  \n}\n\n\n\n\n\n\nreturn [{ json: conversationObject }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        21540,
        3320
      ],
      "id": "dcfea73f-c0cb-4af1-93d0-bdcb61d78402",
      "name": "Formatar Saída Agente Dashboard"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=dashboard_payload:{{ $json.remoteJid }}",
        "value": "={{ JSON.stringify($json) }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21920,
        3320
      ],
      "id": "bd190c17-7139-42d6-8952-e6074afedf04",
      "name": "Armazenar Saída Formatada Dashboard",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5e0b4011-da9c-4094-afb7-8e208d0329e1",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20300,
        2980
      ],
      "id": "9a1074e2-f786-490b-a44c-3853eebfe3a4",
      "name": "Verificar Mensagem Cliente"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "avaliacao_pendente",
        "key": "=avaliacao:pendente:{{ $('Processar Mensagem').item.json.data.remoteJid }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20620,
        2960
      ],
      "id": "6db2d894-fa8b-4b2c-925a-b30adbe6d417",
      "name": "Verificar Avaliação Pendente",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b73026c5-67be-4cc9-885e-205620a1356f",
              "leftValue": "={{ $json.avaliacao_pendente }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20900,
        2960
      ],
      "id": "2b5d8bda-ffe3-437d-ba4e-524bf76fd30d",
      "name": "É Resposta Avaliação"
    },
    {
      "parameters": {
        "jsCode": "const texto = $('Processar Mensagem').first().json.data.text;\nconst nota = parseInt(texto.trim());\n\nif (!isNaN(nota) && nota >= 0 && nota <= 10) {\n  \n  return [\n    {\n      json: {\n        avaliacao_valida: true,\n        nota: nota,\n        remoteJid: $('Processar Mensagem').first().json.data.remoteJid\n      }\n    }\n  ];\n} else {\n  \n  return [\n    {\n      json: {\n        avaliacao_valida: false,\n        remoteJid: $('Processar Mensagem').first().json.data.remoteJid\n      }\n    }\n  ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        21220,
        2960
      ],
      "id": "0c58df9d-54bf-4353-b692-e6b216429caf",
      "name": "Validar Nota Avaliação"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b73026c5-67be-4cc9-885e-205620a1356f",
              "leftValue": "={{ $json.avaliacao_valida }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        21480,
        2960
      ],
      "id": "17298994-e1ee-4b33-aa75-4ed1bc210471",
      "name": "Verificar Nota Válida"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "avaliacao:nota:{{ $json.remoteJid }}",
        "value": "={{ $json.nota }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21760,
        2920
      ],
      "id": "36bc5200-bfa9-47de-851a-61cc056f8be1",
      "name": "Armazenar Nota Avaliação",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "avaliacao:pendente:{{ $json.remoteJid }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        22060,
        2920
      ],
      "id": "409b1c73-600e-4701-931f-0696c9b6daf3",
      "name": "Remover Pendência",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "historico_chat_raw",
        "key": "chat:{{ $json.remoteJid }}:full",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        22580,
        2920
      ],
      "id": "4556e207-f288-4449-a7fd-678bc797026a",
      "name": "Obter Histórico Chat (Avaliação)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let historico = {};\ntry {\n  const chatObject = JSON.parse($('Obter Histórico Chat (Avaliação)').first().json.historico_chat_raw || '{}');\n  historico = chatObject;\n} catch (e) {\n  console.error(\"Erro ao parsear historico_chat_raw para avaliação:\", e);\n  historico = { messages: [], sellers: {}, customers: {} };\n}\n\nconst nota = $('Armazenar Nota Avaliação').first().json.nota;\nconst remoteJid = $('Validar Nota Avaliação').first().json.remoteJid;\n\nconst getSellerName = () => {\n  try {\n    if (historico.sellers && Object.keys(historico.sellers).length > 0) {\n      return Object.values(historico.sellers)[0].name || 'Vendedor';\n    }\n    return 'Vendedor (Não identificado)';\n  } catch (e) { return 'Vendedor (Erro ao identificar)'; }\n};\n\nconst getCustomerName = () => {\n  try {\n    if (historico.customers && Object.keys(historico.customers).length > 0) {\n      return Object.values(historico.customers)[0].name || 'Cliente';\n    }\n    return 'Cliente (Não identificado)';\n  } catch (e) { return 'Cliente (Erro ao identificar)'; }\n};\n\nlet chatFormatado = 'Nenhum histórico disponível';\ntry {\n  if (historico.messages && Array.isArray(historico.messages)) {\n    chatFormatado = historico.messages.map(msg => {\n      const remetente = msg.fromMe ? \n        `Vendedor (${getSellerName()})` : \n        `Cliente (${getCustomerName()})`;\n      const timestamp = msg.timestamp ? new Date(msg.timestamp * 1000).toISOString() : 'Data não disponível';\n      let textContent = msg.text || '';\n      if (msg.messageType === 'audio_transcribed' && msg.isTranscribed) {\n        textContent = msg.text;\n      } else if (msg.messageType === 'audio' && !msg.isTranscribed) {\n        textContent = '[MENSAGEM DE ÁUDIO]';\n      } else if (!msg.text) {\n        textContent = '[MENSAGEM SEM TEXTO]';\n      }\n      return `${remetente}: ${textContent} [${timestamp}]`;\n    }).join('\\n');\n  }\n} catch (e) {\n  console.error('Erro ao formatar mensagens para avaliação:', e);\n  chatFormatado = 'Erro ao formatar o histórico de mensagens para avaliação';\n}\n\nconst contexto = `\\n\\nCONTEXTO:\\n` +\n  `Vendedor: ${getSellerName()}\\n` +\n  `Cliente: ${getCustomerName()}\\n` +\n  `Número do Cliente: ${remoteJid || 'Não identificado'}\\n`;\n\nreturn [\n  {\n    json: {\n      historico_formatado: chatFormatado + contexto,\n      nota_avaliacao: nota,\n      remoteJid: remoteJid,\n      contexto_completo: historico\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        22880,
        2920
      ],
      "id": "453da58b-d0b0-464b-a6f8-6ae0ecbd269b",
      "name": "Formatar Histórico (Avaliação)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você é um assistente especializado em análise de atendimento ao cliente, com foco em avaliações justas e orgânicas.\nAnalise a conversa abaixo entre um vendedor e um cliente. O cliente deu uma nota {{$json.nota_avaliacao}} (de 0 a 10) para o atendimento.\n\nCONVERSA:\n{{$json.historico_formatado}}\n\nINSTRUÇÕES IMPORTANTES:\n1.  Avalie criticamente a nota {{$json.nota_avaliacao}} fornecida pelo cliente em relação ao conteúdo real da conversa.\n2.  Considere se a nota reflete de forma justa a qualidade do atendimento demonstrada pelo vendedor. Por exemplo, o atendimento pode ter sido excelente, mas a nota baixa, ou vice-versa. Sua análise deve levar isso em conta para ser justa com o vendedor.\n3.  O cliente é: {{$json.remoteJid}}.\n\nCom base na conversa e na nota, e seguindo as instruções acima, crie um formulário de avaliação de desempenho do vendedor no formato JSON com os seguintes campos:\n\n1.  `nota_cliente`: a nota numérica dada pelo cliente ({{$json.nota_avaliacao}})\n2.  `pontos_fortes`: array com até 3 pontos fortes identificados no atendimento, embasados pela conversa.\n3.  `pontos_fracos`: array com até 3 pontos que podem ser melhorados, embasados pela conversa.\n4.  `tempo_resposta`: avaliação do tempo de resposta do vendedor (\"Excelente\", \"Bom\", \"Regular\", \"Ruim\" ou \"Não aplicável se o chat não permitir essa inferência\").\n5.  `clareza_comunicacao`: avaliação da clareza na comunicação do vendedor (\"Excelente\", \"Bom\", \"Regular\" ou \"Ruim\").\n6.  `resolucao_problema`: avaliação da capacidade do vendedor de resolver o problema ou encaminhar a solicitação do cliente (\"Excelente\", \"Bom\", \"Regular\", \"Ruim\", \"Não resolvido\" ou \"Não aplicável\").\n7.  `sugestoes_melhoria`: array com até 2 sugestões concretas para melhorar o atendimento, baseadas na análise.\n8.  `resumo_atendimento`: um parágrafo resumindo o atendimento, incluindo uma menção à performance geral do vendedor.\n9.  `contexto_conversa`: um resumo do contexto geral e do(s) principal(is) objetivo(s) da conversa.\n10. `observacao_sobre_nota`: (string) Uma breve análise sobre a consistência da nota do cliente com a qualidade do atendimento observada na conversa. Indique se a nota parece justa, se o atendimento parece ter sido melhor do que a nota sugere, ou pior, e justifique brevemente.\n\nRetorne APENAS o objeto JSON, sem explicações adicionais.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        23240,
        2920
      ],
      "id": "c4a779fa-a516-4882-b8bc-b66d35d6292d",
      "name": "Analisar Atendimento"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        23180,
        3120
      ],
      "id": "27affaaa-f393-4cbb-8e8a-a6bcbf19a17f",
      "name": "OpenAI Chat Model (Avaliação)",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const stringJsonComBloco = items[0].json.output;\nlet jsonExtraido = stringJsonComBloco;\n\n\nif (typeof jsonExtraido === 'string') {\n  if (jsonExtraido.startsWith('```json\\n')) {\n    jsonExtraido = jsonExtraido.substring(7);\n  } else if (jsonExtraido.startsWith('```json')) {\n    jsonExtraido = jsonExtraido.substring(6);\n  } else if (jsonExtraido.startsWith('```')) {\n    jsonExtraido = jsonExtraido.substring(3);\n  }\n\n  if (jsonExtraido.endsWith('\\n```')) {\n    jsonExtraido = jsonExtraido.substring(0, jsonExtraido.length - 4);\n  } else if (jsonExtraido.endsWith('```')) {\n    jsonExtraido = jsonExtraido.substring(0, jsonExtraido.length - 3);\n  }\n  jsonExtraido = jsonExtraido.trim();\n}\n\nlet objetoJson;\ntry {\n  \n  if (typeof jsonExtraido === 'string') {\n    objetoJson = JSON.parse(jsonExtraido);\n  } else if (typeof jsonExtraido === 'object' && objetoJson !== null) {\n    objetoJson = jsonExtraido;\n  } else {\n    throw new Error(\"Não foi possível determinar o formato do JSON para parse.\");\n  }\n} catch (error) {\n  console.error(\"Erro ao fazer parse do JSON extraído: \", error.message);\n  console.error(\"JSON extraído que causou o erro: \", jsonExtraido);\n  return [{ json: { error: \"Falha ao analisar o JSON do LLM\", details: error.message, problematicJsonString: String(jsonExtraido) } }];\n}\n\n\nobjetoJson.nota_cliente = objetoJson.nota_cliente !== undefined && !isNaN(Number(objetoJson.nota_cliente)) ? Number(objetoJson.nota_cliente) : 0;\nobjetoJson.pontos_fortes = Array.isArray(objetoJson.pontos_fortes) ? objetoJson.pontos_fortes : [];\nobjetoJson.pontos_fracos = Array.isArray(objetoJson.pontos_fracos) ? objetoJson.pontos_fracos : [];\nobjetoJson.sugestoes_melhoria = Array.isArray(objetoJson.sugestoes_melhoria) ? objetoJson.sugestoes_melhoria : [];\n\nobjetoJson.tempo_resposta = String(objetoJson.tempo_resposta || \"Não informado\");\nobjetoJson.clareza_comunicacao = String(objetoJson.clareza_comunicacao || \"Não informado\");\nobjetoJson.resolucao_problema = String(objetoJson.resolucao_problema || \"Não informado\");\nobjetoJson.resumo_atendimento = String(objetoJson.resumo_atendimento || \"Não informado\");\nobjetoJson.contexto_conversa = String(objetoJson.contexto_conversa || \"Não informado\");\n\n\nlet remoteJidValue = \"Não informado\";\ntry {\n  const formatarHistoricoNodeOutput = $('Formatar Histórico (Avaliação)').item.json;\n  if (formatarHistoricoNodeOutput && formatarHistoricoNodeOutput.remoteJid) {\n    remoteJidValue = formatarHistoricoNodeOutput.remoteJid;\n    objetoJson.remoteJid = remoteJidValue;\n    objetoJson.contexto_completo = formatarHistoricoNodeOutput.contexto_completo || {};\n  }\n} catch (e) {\n  console.warn(\"Não foi possível obter remoteJid de nós anteriores. Erro:\", e.message);\n}\n\n\nconst jsonFormatadoLegivel = JSON.stringify(objetoJson, null, 2);\n\n\nreturn [{ json: { formulario_formatado: jsonFormatadoLegivel, raw_formulario: objetoJson } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        23720,
        2920
      ],
      "id": "14480711-3eb5-4728-b310-56e1cc1d48fe",
      "name": "Formatar Formulário (Avaliação)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "avaliacao:formulario:{{ $('Formatar Histórico (Avaliação)').item.json.remoteJid }}",
        "value": "={{ $('Formatar Formulário (Avaliação)').item.json.formulario_formatado }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        24060,
        2920
      ],
      "id": "1a9d5015-cca4-4240-804d-19003e9b6e0e",
      "name": "Armazenar Formulário (Avaliação)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://projeto-n8n.vercel.app/api/receber-avaliacao/7f9c3241804dedec098f8b40c8abc1e8",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $('Formatar Formulário (Avaliação)').item.json.formulario_formatado }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        24420,
        2920
      ],
      "id": "816f635c-4758-48c5-b2e7-d0ad42fba1cf",
      "name": "Notificar Conclusão Avaliação"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        18400,
        2240
      ],
      "id": "a12ab5e5-de01-4790-9722-cea0ed269cae",
      "name": "Wait",
      "webhookId": "088b94eb-d737-44ce-bcde-69829a47a678"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: Erro no Parse?').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('IF: Erro no Parse?').item.json.error_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2b137303-b6de-4dee-9dac-b6697af0fe14",
      "name": "HTTP Request: Enviar Msg (Erro Formato)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19140,
        2300
      ]
    },
    {
      "parameters": {
        "jsCode": "const text = $json.data.text;\nconst parts = text.split(';');\nlet response = {};\n\nif (parts.length === 4) {\n  const [name, email, password, identifier] = parts.map(part => part.trim());\n  \n  \n  if (name && email && password && identifier && email.includes('@')) {\n    response = {\n      parse_error: false,\n      registration_data: {\n        name: name,\n        email: email,\n        password: password,\n        identifier: identifier\n      }\n    };\n  } else {\n    response = {\n      parse_error: true,\n      error_message: 'Dados inválidos ou incompletos. Verifique o formato: Nome;Email;Senha;CPF/CNPJ'\n    };\n  }\n} else {\n  response = {\n    parse_error: true,\n    error_message: 'Formato inválido. Use: Nome;Email;Senha;CPF/CNPJ'\n  };\n}\n\n\nresponse.remoteJid = $json.data.remoteJid;\n\nreturn [{ json: response }];"
      },
      "id": "af4a5970-8db0-49db-a7cc-535c82da5662",
      "name": "Code: Parse Dados Cadastro",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        18640,
        2500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://projeto-n8n.vercel.app/api/conversas/7f9c3241804dedec098f8b40c8abc1e8",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ [ $('Formatar Saída Agente Dashboard').item.json ] }}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "name": "Enviar Conversas Formatadas para API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        22240,
        3320
      ],
      "id": "9eb92861-94bc-4cd3-b249-77090f3f33cf"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "818bbde3-3bb0-4e5e-8bc1-a2c9937e7268",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "c97185e9-72cc-494c-b5e0-41d9e8d1b87d",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.text }}",
              "rightValue": "Me avalie",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20320,
        3780
      ],
      "id": "ce9d4117-82ca-4d2c-a7a2-7f6fd4419fb1",
      "name": "Verificar Mensagem Avaliação"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('Processar Mensagem').item.json.data.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Por favor, avalie meu atendimento de 0 a 10."
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20660,
        3780
      ],
      "id": "2051001c-63e3-4b32-a591-c377c60b0baa",
      "name": "Enviar Pedido Avaliação"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=avaliacao:pendente:{{ $('Processar Mensagem').item.json.data.remoteJid }}",
        "value": "true"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20880,
        3780
      ],
      "id": "d95d01a4-4ed8-4d78-b624-3d4d45525ab4",
      "name": "Marcar Avaliação Pendente",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        21120,
        3780
      ],
      "id": "a6c773ba-974b-457c-840b-025f557397fb",
      "name": "Aguardar Resposta",
      "webhookId": "cbf4c00b-52df-4a71-82f0-916a6abbf06f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Obrigado pela sua avaliação! Sua nota foi registrada com sucesso."
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        22300,
        2920
      ],
      "id": "03b3cf6d-4199-42c6-bfe2-dbfc2a71d02b",
      "name": "Confirmar Avaliação Cliente"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fb1da4c2-1113-4d2a-b775-dfa2c1bafddc",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "6e916fe4-a46a-4e8f-8550-c27b65c55856",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.text}}",
              "rightValue": "Muito obrigado",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20280,
        3340
      ],
      "id": "84450bd2-4d7a-4f1e-aa3a-f86efa80a678",
      "name": "Gatilho Obrigado"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=chat:{{ $('Armazenar Mensagens (Atualizado)').item.remoteJid }}:full"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        22500,
        3320
      ],
      "id": "e2568b3d-b9aa-415a-8e85-02bc5a2ee31d",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=dashboard_payload:{{ $('Armazenar Mensagens (Atualizado)').item.json.remoteJdi }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        22720,
        3320
      ],
      "id": "ed295ad2-4682-4639-8d1d-530a06a2ca93",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook Entrada": [
      {
        "json": {
          "headers": {
            "host": "n8n-n8n.lwr5mp.easypanel.host",
            "user-agent": "axios/1.7.9",
            "content-length": "755",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n-n8n.lwr5mp.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "f0c35f83d344",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Paulo Henrique",
            "data": {
              "key": {
                "remoteJid": "5521979875304@s.whatsapp.net",
                "fromMe": true,
                "id": "6F658A7C465E49DAC99F271A9FDEFA6C"
              },
              "pushName": "Henrique",
              "status": "SERVER_ACK",
              "message": {
                "conversation": "Muito obrigado",
                "messageContextInfo": {
                  "messageSecret": "5VQdEUOA4EPzEYTILIGwDYHQwAmA6cIaawp/puEbzJc="
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1747078412,
              "instanceId": "d54b371c-67ed-4c0d-82d9-6b66dea0c990",
              "source": "android"
            },
            "destination": "https://n8n-n8n.lwr5mp.easypanel.host/webhook/avaliacao-atendimento-webhook",
            "date_time": "2025-05-12T16:33:33.083Z",
            "sender": "556186446934@s.whatsapp.net",
            "server_url": "https://evolution-evolution.lwr5mp.easypanel.host",
            "apikey": "948D0A6EDFA1-4BC3-AFFD-70CE70DD89D7"
          },
          "webhookUrl": "https://n8n-n8n.lwr5mp.easypanel.host/webhook/avaliacao-atendimento-webhook",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Code: Parse Dados Cadastro": {
      "main": [
        [
          {
            "node": "IF: Erro no Parse?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "IF: É resposta de cadastro?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Entrada": {
      "main": [
        [
          {
            "node": "Processar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Mensagem": {
      "main": [
        [
          {
            "node": "IF: Mensagem do Dono?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Verificar se é Áudio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar se é Áudio": {
      "main": [
        [
          {
            "node": "Baixar Arquivo de Áudio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filtrar Chats Individuais",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atualizar Mensagem com Transcrição": {
      "main": [
        [
          {
            "node": "Aguardar Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar Chats Individuais": {
      "main": [
        [
          {
            "node": "Aguardar Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aguardar Mensagens": {
      "main": [
        [
          {
            "node": "Agrupar e Format Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrupar e Format Mensagens": {
      "main": [
        [
          {
            "node": "Obter Histórico de Chat Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Histórico de Chat Existente": {
      "main": [
        [
          {
            "node": "Anexar Novas Mensagens ao Histórico de Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anexar Novas Mensagens ao Histórico de Chat": {
      "main": [
        [
          {
            "node": "Armazenar Mensagens (Atualizado)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Mensagens (Atualizado)": {
      "main": [
        [
          {
            "node": "Gatilho Obrigado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Mensagem Cliente": {
      "main": [
        [
          {
            "node": "Verificar Avaliação Pendente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Avaliação Pendente": {
      "main": [
        [
          {
            "node": "É Resposta Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É Resposta Avaliação": {
      "main": [
        [
          {
            "node": "Validar Nota Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Nota Avaliação": {
      "main": [
        [
          {
            "node": "Verificar Nota Válida",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Nota Válida": {
      "main": [
        [
          {
            "node": "Armazenar Nota Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Nota Avaliação": {
      "main": [
        [
          {
            "node": "Remover Pendência",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remover Pendência": {
      "main": [
        [
          {
            "node": "Confirmar Avaliação Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Histórico Chat (Avaliação)": {
      "main": [
        [
          {
            "node": "Formatar Histórico (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Histórico (Avaliação)": {
      "main": [
        [
          {
            "node": "Analisar Atendimento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar Atendimento": {
      "main": [
        [
          {
            "node": "Formatar Formulário (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model (Avaliação)": {
      "ai_languageModel": [
        [
          {
            "node": "Analisar Atendimento",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Formulário (Avaliação)": {
      "main": [
        [
          {
            "node": "Armazenar Formulário (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Formulário (Avaliação)": {
      "main": [
        [
          {
            "node": "Notificar Conclusão Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Conversa Completa p/ Dashboard": {
      "main": [
        [
          {
            "node": "Formatar Histórico p/ Dashboard e IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Histórico p/ Dashboard e IA": {
      "main": [
        [
          {
            "node": "Analisar Chat p/ Dashboard (IA)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar Chat p/ Dashboard (IA)": {
      "main": [
        [
          {
            "node": "Formatar Saída Agente Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model (Dashboard)": {
      "ai_languageModel": [
        [
          {
            "node": "Analisar Chat p/ Dashboard (IA)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Baixar Arquivo de Áudio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Saída Agente Dashboard": {
      "main": [
        [
          {
            "node": "Armazenar Saída Formatada Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Mensagem do Dono?": {
      "main": [
        [
          {
            "node": "IF: É comando /setup?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: É comando /setup?": {
      "main": [
        [
          {
            "node": "Redis GET: Verificar Chave API Existente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF: É resposta de cadastro?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET: Verificar Chave API Existente": {
      "main": [
        [
          {
            "node": "IF: Já Registrado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Já Registrado?": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Já Registrado)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Pedir Dados Cadastro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: É resposta de cadastro?": {
      "main": [
        [
          {
            "node": "Code: Parse Dados Cadastro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Erro no Parse?": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Erro Formato)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Chamar API Register",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request: Chamar API Register": {
      "main": [
        [
          {
            "node": "Code: Processar Resposta API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Processar Resposta API": {
      "main": [
        [
          {
            "node": "IF: Registro OK?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Registro OK?": {
      "main": [
        [
          {
            "node": "Redis SET: Salvar API Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Enviar Msg (Erro API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis SET: Salvar API Key": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Sucesso)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Saída Formatada Dashboard": {
      "main": [
        [
          {
            "node": "Enviar Conversas Formatadas para API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Atualizar Mensagem com Transcrição",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request: Pedir Dados Cadastro": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Mensagem Avaliação": {
      "main": [
        [
          {
            "node": "Enviar Pedido Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Pedido Avaliação": {
      "main": [
        [
          {
            "node": "Marcar Avaliação Pendente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Marcar Avaliação Pendente": {
      "main": [
        [
          {
            "node": "Aguardar Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmar Avaliação Cliente": {
      "main": [
        [
          {
            "node": "Obter Histórico Chat (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gatilho Obrigado": {
      "main": [
        [
          {
            "node": "Obter Conversa Completa p/ Dashboard",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Verificar Mensagem Avaliação",
            "type": "main",
            "index": 0
          },
          {
            "node": "Verificar Mensagem Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Conversas Formatadas para API": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b4c3919-2df6-4a51-abdd-a00b2396107a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "13bc83b253b227bcad46beb8869279f45f1be61c89bdea526a2d396efe853401"
  },
  "id": "nbhszVoGfRJ9VRmt",
  "tags": [
    {
      "createdAt": "2025-05-08T16:29:17.295Z",
      "updatedAt": "2025-05-08T16:29:17.295Z",
      "id": "44ya8b4dNQRNR52f",
      "name": "owner-registration"
    },
    {
      "createdAt": "2025-05-07T12:52:01.478Z",
      "updatedAt": "2025-05-07T12:52:01.478Z",
      "id": "AknaoY9DgpcxL0H0",
      "name": "dashboard-chat"
    },
    {
      "createdAt": "2025-05-02T20:44:26.750Z",
      "updatedAt": "2025-05-02T20:44:26.750Z",
      "id": "HJh2aycXpkW4R6K1",
      "name": "evolution-api"
    },
    {
      "createdAt": "2025-05-07T12:52:01.473Z",
      "updatedAt": "2025-05-07T12:52:01.473Z",
      "id": "I8lZORu9kLFyvast",
      "name": "audio-transcription"
    },
    {
      "createdAt": "2025-05-02T19:16:14.348Z",
      "updatedAt": "2025-05-02T19:16:14.348Z",
      "id": "TiEqPiDEbKjRurRg",
      "name": "evaluation"
    },
    {
      "createdAt": "2025-05-02T19:16:14.335Z",
      "updatedAt": "2025-05-02T19:16:14.335Z",
      "id": "VSbAyMF7ZHJmXGRs",
      "name": "chat"
    },
    {
      "createdAt": "2025-05-02T19:16:14.343Z",
      "updatedAt": "2025-05-02T19:16:14.343Z",
      "id": "nrXOO1OLR4Csgx6x",
      "name": "whatsapp"
    }
  ]
}