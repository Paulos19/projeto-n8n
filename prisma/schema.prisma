// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avaliacao {
  id                  String    @id @default(cuid())
  nota_cliente        Int
  pontos_fortes       String[]
  pontos_fracos        String[]
  tempo_resposta      String
  clareza_comunicacao String
  resolucao_problema  String
  sugestoes_melhoria  String[]
  resumo_atendimento  String    @db.Text
  remoteJid           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  userId              String? // Adicionado para relacionar com o User
  user                User?     @relation(fields: [userId], references: [id]) // Adicionado

  @@index([userId]) // Adicionado
  @@map("avaliacoes")
}

model ChatInteraction {
  id                String    @id @default(cuid())
  remoteJid         String
  customerName      String
  chatHistory       Json
  analysisSummary   String?
  analysisKeywords  String[]
  eventTimestamp    DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId            String? // Adicionado para relacionar com o User
  user              User?     @relation(fields: [userId], references: [id]) // Adicionado

  @@index([remoteJid])
  @@index([eventTimestamp])
  @@index([userId]) // Adicionado
  @@map("chat_interactions")
}

// Modelos para NextAuth.js / Auth.js
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  identifier    String?   @unique
  passwordHash  String?
  webhookApiKey String?   @unique // Chave para identificar o webhook do usuário

  accounts      Account[]
  sessions      Session[]
  avaliacoes    Avaliacao[]       // Adicionado: Relação inversa
  chatInteractions ChatInteraction[] // Adicionado: Relação inversa

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}