{
  "name": "R.A.I.O",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "avaliacao-atendimento-webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        17580,
        4260
      ],
      "id": "5ce75ef5-7b73-4dde-a62f-9afdbd578dbd",
      "name": "Webhook Entrada",
      "webhookId": "d918ace9-297b-4fcf-809c-4e41c6db9c5d"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "746f8499-1e77-473a-b034-43164efaa7c7",
              "name": "data.remoteJid",
              "value": "={{ $json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "e4482dd4-a6dc-4328-ad4d-8b7612008227",
              "name": "data.fromMe",
              "value": "={{ $json.body.data.key.fromMe }}",
              "type": "boolean"
            },
            {
              "id": "2eb3c8b8-4bda-4d71-b8ab-c5a61333b3d9",
              "name": "data.id",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            },
            {
              "id": "d0ce3ce8-2dee-44af-b279-4faad7e1fbb6",
              "name": "data.text",
              "value": "={{ $json.body.data.message.conversation || $json.body.data.message.extendedTextMessage?.text }}",
              "type": "string"
            },
            {
              "id": "f67db619-80c0-4591-accf-e7d6e8a8d71f",
              "name": "data.source",
              "value": "={{ $json.body.data.source }}",
              "type": "string"
            },
            {
              "id": "a7862074-5f44-4fb7-9e84-0a34778523c7",
              "name": "evo.server_url",
              "value": "={{ $json.body.server_url }}",
              "type": "string"
            },
            {
              "id": "cbbc1ab6-6f6c-4cb3-bf2a-bf5a968140bc",
              "name": "evo.instance",
              "value": "={{ $json.body.instance }}",
              "type": "string"
            },
            {
              "id": "fa5b858d-8682-43d6-b143-908b6003dbcd",
              "name": "evo.apikey",
              "value": "={{ $json.body.apikey }}",
              "type": "string"
            },
            {
              "id": "9fb78ed9-936f-420b-8c90-6252d74afe59",
              "name": "data.messageType",
              "value": "={{ $json.body.data.messageType }}",
              "type": "string"
            },
            {
              "id": "8d7af79a-150b-4ed7-b37e-5b91e6833e5d",
              "name": "data.mediaUrl",
              "value": "={{ $json.body.data.message?.audioMessage?.mediaUrl || $json.body.data.message?.mediaUrl }}",
              "type": "string"
            },
            {
              "id": "a1b2c3d4-e5f6-4g7h-8i9j-0k1l2m3n4o5p",
              "name": "data.sender",
              "value": "={{ $json.body.sender }}",
              "type": "string"
            },
            {
              "id": "b1c2d3e4-f5g6-h7i8-j9k0-l1m2n3o4p5q6",
              "name": "data.pushName",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "c1d2e3f4-g5h6-i7j8-k9l0-m1n2o3p4q5r6",
              "name": "data.messageTimestamp",
              "value": "={{ $json.body.data.messageTimestamp }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        17900,
        4260
      ],
      "id": "b891ee3b-bda7-4860-a367-18791b0ee065",
      "name": "Processar Mensagem"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-owner-message",
              "leftValue": "={{ $json.data.fromMe }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e31e3eaa-1c85-4a5c-b112-6c6458111929",
      "name": "IF: Mensagem do Dono?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18320,
        4260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-setup-command",
              "leftValue": "={{ $json.data.text }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "rightValue": "/setup"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f0ed6546-392d-4645-888a-464e581213f4",
      "name": "IF: É comando /setup?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18640,
        4240
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "existing_api_key",
        "key": "=registration_apikey:{{ $json.data.remoteJid }}",
        "options": {}
      },
      "id": "292b36a0-1e76-4504-954b-5e45ad2d5955",
      "name": "Redis GET: Verificar Chave API Existente",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        19080,
        4100
      ],
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-key-exists",
              "leftValue": "={{ $json.existing_api_key }}",
              "operator": {
                "type": "any",
                "operation": "isEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "71a06306-c5ea-4203-86c8-5da1fb383d6f",
      "name": "IF: Já Registrado?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        19340,
        4100
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: Já Registrado?').item.json.data.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Você já está configurado. Sua chave API está registrada."
            }
          ]
        },
        "options": {}
      },
      "id": "7642ac1e-3c69-4f87-a9e1-bfb8217ddf8f",
      "name": "HTTP Request: Enviar Msg (Já Registrado)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19980,
        4080
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: É comando /setup?').item.json.data.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Para configurar, por favor envie seus dados no formato:\nNome Completo;Seu Email;Sua Senha;Seu CPF ou CNPJ"
            }
          ]
        },
        "options": {}
      },
      "id": "a78b60af-75bd-498d-8d30-9c508e99d24e",
      "name": "HTTP Request: Pedir Dados Cadastro",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19500,
        4220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-if-reg-data",
              "leftValue": "={{ $json.data.text }}",
              "operator": {
                "type": "string",
                "operation": "contains"
              },
              "rightValue": ";"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "59df70b9-ee56-4517-93f3-0b457d311b74",
      "name": "IF: É resposta de cadastro?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18920,
        4560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-parse-error",
              "leftValue": "={{ $json.parse_error }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "89799e4d-a68c-403e-a80f-187e9fda74a8",
      "name": "IF: Erro no Parse?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        19580,
        4520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://projeto-n8n.vercel.app/api/auth/register",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.registration_data }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "33c85db1-3ab5-43fb-9034-111ffe573f49",
      "name": "HTTP Request: Chamar API Register",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19860,
        4560
      ]
    },
    {
      "parameters": {
        "jsCode": "const response = $json; // $json é o objeto de resposta completo\nconst statusCode = $json.statusCode;\nlet body = {}; // Inicia como objeto vazio\n\n// Verifica se $json.body existe e se precisa ser parseado\nif ($json.body) {\n  if (typeof $json.body === 'string') {\n    try {\n      body = JSON.parse($json.body); // Tenta parsear se for string\n    } catch (e) {\n      console.error(\"Erro ao fazer parse do $json.body (string):\", e);\n      // Mantém body como {} se o parse falhar\n    }\n  } else if (typeof $json.body === 'object') {\n    body = $json.body; // Usa diretamente se já for objeto\n  }\n}\n\n// Garante que remoteJid seja buscado corretamente (verifique o nome do nó!)\nlet remoteJid = 'JID_DESCONHECIDO';\ntry {\n    // Use .first() pois o nó anterior pode ter múltiplas saídas em testes manuais\n    remoteJid = $('Code: Parse Dados Cadastro').first().json.remoteJid || remoteJid;\n} catch(e) {\n    console.error(\"Erro ao obter remoteJid do nó 'Code: Parse Dados Cadastro':\", e);\n}\n\n\nlet result = {\n  remoteJid: remoteJid,\n  registration_complete_flag: false,\n  final_message: 'Ocorreu um erro ao tentar registrar. Tente novamente mais tarde.',\n  webhookApiKey: null\n};\n\n// Usa as variáveis 'statusCode' e 'body' (que agora é garantido ser um objeto)\nif (statusCode === 201 && body.webhookApiKey) {\n  result.registration_complete_flag = true;\n  result.final_message = `Registro realizado com sucesso! Sua Webhook API Key é: ${body.webhookApiKey} | Guarde esta chave em segurança, ela será necessária para identificar suas requisições.`;\n  result.webhookApiKey = body.webhookApiKey;\n} else if (statusCode === 409) {\n  result.final_message = `Erro no registro: ${body.message || 'Email ou Identificador já cadastrado.'}`;\n} else if (statusCode === 400) {\n  result.final_message = `Erro no registro: ${body.message || 'Dados inválidos.'}`;\n} else {\n   result.final_message = `Erro no servidor de registro (Código: ${statusCode}). Tente novamente.`;\n}\n\nreturn [{ json: result }];"
      },
      "id": "dea1ad45-453e-465e-a9f1-5f8aa0354d39",
      "name": "Code: Processar Resposta API",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20120,
        4560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-reg-ok",
              "leftValue": "={{ $json.registration_complete_flag }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8e4ae59e-e20f-4794-b2dd-a77c5a3fa266",
      "name": "IF: Registro OK?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20400,
        4560
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=registration_apikey:{{ $json.remoteJid }}",
        "value": "={{ $json.webhookApiKey }}"
      },
      "id": "33706bbe-b038-49cf-abac-c5e0679ca1d3",
      "name": "Redis SET: Salvar API Key",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20740,
        4540
      ],
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('Code: Processar Resposta API').item.json.final_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9c56ef93-659e-4870-8670-d0c69991ac81",
      "name": "HTTP Request: Enviar Msg (Sucesso)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        21080,
        4540
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $json.final_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "cf50dd8b-d7e8-4e0d-b0aa-1d0c5f898e92",
      "name": "HTTP Request: Enviar Msg (Erro API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        20740,
        4700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d7c8f2a1-e3b4-4d5a-a6f7-g8h9i0j1k2l3",
              "leftValue": "={{ $json.data.messageType }}",
              "rightValue": "audioMessage",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        18460,
        5020
      ],
      "id": "63c24b8c-f5a1-40d7-9378-88f0d2f27578",
      "name": "Verificar se é Áudio"
    },
    {
      "parameters": {
        "url": "={{ $json.data.mediaUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        18740,
        4800
      ],
      "id": "243e0287-aad1-40db-a31e-b65cee873dd3",
      "name": "Baixar Arquivo de Áudio",
      "notes": "Baixa o áudio da mediaUrl para transcrição"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        19000,
        4800
      ],
      "id": "2fdb5558-bc51-4b86-b429-eab1ac65589a",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1b2c3d4-new-data-object-fix",
              "name": "data",
              "type": "json",
              "value": "={{ ({ ...JSON.parse(JSON.stringify($('Processar Mensagem').item.json.data)), text: $('OpenAI').item.json.text, messageType: 'audio_transcribed', is_transcribed: true }) }}"
            },
            {
              "id": "e5f6g7h8-new-evo-object-fix",
              "name": "evo",
              "type": "json",
              "value": "={{ $('Processar Mensagem').item.json.evo }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        19280,
        4800
      ],
      "id": "e65d2493-19de-467d-b6c2-4372bbbd728a",
      "name": "Atualizar Mensagem com Transcrição"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "daa4b9b5-87a2-4f28-b4bd-ba88cc3ab4ed",
              "leftValue": "={{ $json.data.remoteJid }}",
              "rightValue": "@s.whatsapp.net",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        18920,
        5180
      ],
      "id": "583114ed-fbd9-47a6-8539-260696a0907b",
      "name": "Filtrar Chats Individuais"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        19220,
        5080
      ],
      "id": "3661eea9-b98d-4673-a827-3e7f74c94d0e",
      "name": "Aguardar Mensagens",
      "webhookId": "24da4e40-c742-414e-91c5-ddb6ee1dfc83",
      "notes": "Aguarda 15 segundos coletando todas as mensagens recebidas neste período"
    },
    {
      "parameters": {
        "jsCode": "const messages = $input.all();\nconst groupedMessages = {};\nlet firstRemoteJid = null; \n\nconst getSafe = (obj, path, defaultValue = null) => {\n  return path.split('.').reduce((acc, key) => {\n    try {\n      return acc && acc[key] !== undefined ? acc[key] : defaultValue;\n    } catch (e) {\n      return defaultValue;\n    }\n  }, obj);\n};\n\nmessages.forEach(msg => {\n  try {\n    \n    const remoteJid = getSafe(msg, 'json.data.remoteJid');\n    if (!remoteJid) {\n      console.log('Mensagem sem remoteJid, ignorando:', msg);\n      return; \n    }\n    \n    if (!firstRemoteJid) firstRemoteJid = remoteJid;\n\n    const fromMe = getSafe(msg, 'json.data.fromMe', false);\n    let text = getSafe(msg, 'json.data.text', '');\n    const messageType = getSafe(msg, 'json.data.messageType', 'unknown');\n    const isTranscribed = getSafe(msg, 'json.data.is_transcribed', false);\n\n    if (messageType === 'audio' && !isTranscribed) {\n        text = '[MENSAGEM DE ÁUDIO NÃO TRANSCRITA]';\n    } else if (!text && messageType === 'audio_transcribed') {\n        text = '[TRANSCRIÇÃO VAZIA OU FALHOU]';\n    } else if (!text) {\n        text = '[MENSAGEM SEM TEXTO]';\n    }\n\n    const instance = getSafe(msg, 'json.evo.instance');\n    const pushName = getSafe(msg, 'json.data.pushName', 'Cliente');\n    const messageId = getSafe(msg, 'json.data.id');\n    const timestamp = getSafe(msg, 'json.data.messageTimestamp', Date.now() / 1000);\n\n    const sender = fromMe ? 'Vendedor' : 'Cliente';\n    const senderId = fromMe ? instance : remoteJid;\n\n    if (!groupedMessages[remoteJid]) {\n      groupedMessages[remoteJid] = {\n        messages: [],\n        senders: {},\n        sellers: {},\n        customers: {}\n      };\n    }\n\n    \n    if (fromMe && instance && !groupedMessages[remoteJid].sellers[instance]) {\n      groupedMessages[remoteJid].sellers[instance] = {\n        name: 'Vendedor (' + instance + ')',\n        instance: instance\n      };\n    }\n\n    \n    if (!fromMe && !groupedMessages[remoteJid].customers[remoteJid]) {\n      groupedMessages[remoteJid].customers[remoteJid] = {\n        name: pushName || 'Cliente',\n        number: remoteJid\n      };\n    }\n\n    \n    groupedMessages[remoteJid].messages.push({\n      text: text,\n      fromMe: fromMe,\n      sender: sender,\n      senderId: senderId,\n      timestamp: timestamp,\n      messageId: messageId,\n      messageType: messageType,\n      isTranscribed: isTranscribed,\n      rawData: msg.json\n    });\n  } catch (error) {\n    console.error('Erro ao processar mensagem:', error, 'Mensagem:', msg);\n  }\n});\n\n\nconst output = [];\nfor (const remoteJid in groupedMessages) {\n  try {\n    \n    if (Object.keys(groupedMessages[remoteJid].customers).length === 0 && remoteJid) {\n        groupedMessages[remoteJid].customers[remoteJid] = {\n            name: 'Cliente',\n            number: remoteJid\n        };\n    }\n\n    \n     if (Object.keys(groupedMessages[remoteJid].sellers).length === 0) {\n        \n        let defaultInstance = 'InstanciaPadrao';\n        const firstFromMeMsg = groupedMessages[remoteJid].messages.find(m => m.fromMe && m.rawData?.evo?.instance);\n        if (firstFromMeMsg) {\n            defaultInstance = firstFromMeMsg.rawData.evo.instance;\n        }\n        groupedMessages[remoteJid].sellers[defaultInstance] = {\n            name: `Vendedor (${defaultInstance})`,\n            instance: defaultInstance\n        };\n    }\n\n    output.push({\n      json: {\n        remoteJid: remoteJid,\n        messages: groupedMessages[remoteJid].messages,\n        senders: {\n          ...groupedMessages[remoteJid].sellers,\n          ...groupedMessages[remoteJid].customers\n        },\n        sellers: groupedMessages[remoteJid].sellers,\n        customers: groupedMessages[remoteJid].customers,\n        formattedMessages: groupedMessages[remoteJid].messages.map(msg => {\n          return {\n            sender: msg.sender,\n            senderId: msg.senderId,\n            text: msg.text,\n            timestamp: msg.timestamp,\n            messageId: msg.messageId,\n            messageType: msg.messageType\n          };\n        }),\n        conversationContext: {\n          seller: Object.values(groupedMessages[remoteJid].sellers)[0] || null,\n          customer: Object.values(groupedMessages[remoteJid].customers)[0] || null\n        }\n      }\n    });\n  } catch (error) {\n    console.error('Erro ao formatar saída para remoteJid:', remoteJid, error);\n  }\n}\n\n\nif (output.length === 0 && firstRemoteJid) {\n    console.warn(`Nenhuma mensagem processada para ${firstRemoteJid}, criando saída padrão.`);\n    output.push({\n        json: {\n            remoteJid: firstRemoteJid,\n            messages: [],\n            senders: { [firstRemoteJid]: { name: 'Cliente', number: firstRemoteJid } },\n            sellers: {},\n            customers: { [firstRemoteJid]: { name: 'Cliente', number: firstRemoteJid } },\n            formattedMessages: [],\n            conversationContext: { seller: null, customer: { name: 'Cliente', number: firstRemoteJid } }\n        }\n    });\n}\n\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        19520,
        4860
      ],
      "id": "9ddfb26d-b53f-478c-a842-f6266181f422",
      "name": "Agrupar e Format Mensagens"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "existing_chat_object_string",
        "key": "=chat:{{ $('Agrupar e Format Mensagens').item.json.remoteJid }}:full",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        19520,
        5080
      ],
      "id": "4c9756d6-8295-4ee4-9a08-e29f18351c43",
      "name": "Obter Histórico de Chat Existente",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const newMessagesBundle = $('Agrupar e Format Mensagens').item.json;\nconst currentBatchOfMessages = newMessagesBundle.messages || [];\nconst remoteJid = newMessagesBundle.remoteJid;\n\nlet historicMessagesArray = [];\n\nconst existingChatObjectString = $input.item.json.existing_chat_object_string;\n\nif (existingChatObjectString) {\n  try {\n    const existingChatObject = JSON.parse(existingChatObjectString);\n    if (existingChatObject && Array.isArray(existingChatObject.messages)) {\n      historicMessagesArray = existingChatObject.messages;\n    } else {\n      console.warn('Campo messages não encontrado ou não é array no objeto do Redis para: ' + remoteJid);\n    }\n  } catch (e) {\n    console.warn('Falha ao parsear objeto de chat existente do Redis para: ' + remoteJid, e);\n  }\n}\n\nconst combinedMessages = historicMessagesArray.concat(currentBatchOfMessages);\n\n\nconst uniqueMessages = [];\nconst seenIds = new Set();\nfor (const msg of combinedMessages) {\n  if (msg.messageId) {\n    if (!seenIds.has(msg.messageId)) {\n      uniqueMessages.push(msg);\n      seenIds.add(msg.messageId);\n    }\n  } else {\n    uniqueMessages.push(msg); \n  }\n}\n\n\nconst MAX_HISTORY_SIZE = 500; \nconst finalMessageArray = uniqueMessages.length > MAX_HISTORY_SIZE ? uniqueMessages.slice(-MAX_HISTORY_SIZE) : uniqueMessages;\n\nconst finalStorageObject = {\n    messages: finalMessageArray, \n    senders: newMessagesBundle.senders,\n    sellers: newMessagesBundle.sellers,\n    customers: newMessagesBundle.customers,\n    timestamp: Date.now()\n};\n\nreturn [{\n  json: {\n    remoteJid: remoteJid,\n    stringified_updated_storage_object: JSON.stringify(finalStorageObject)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        19520,
        5300
      ],
      "id": "341b58c4-23c1-47e5-a965-0d08ce969c77",
      "name": "Anexar Novas Mensagens ao Histórico de Chat"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=chat:{{ $json.remoteJid }}:full",
        "value": "={{ $json.stringified_updated_storage_object }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        19780,
        5120
      ],
      "id": "ca1da306-6d0f-4552-bdfc-bc55f31802dd",
      "name": "Armazenar Mensagens (Atualizado)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      },
      "notes": "Armazena todo o histórico da conversa (acumulado) com expiração de 24h (se configurado no Redis)"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "chat_data_raw_dashboard",
        "key": "=chat:{{ $('Armazenar Mensagens (Atualizado)').item.json.remoteJid }}:full",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20040,
        5120
      ],
      "id": "e062b496-1e82-4e8f-828d-3b1106071384",
      "name": "Obter Conversa Completa p/ Dashboard",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatDataRaw = $json.chat_data_raw_dashboard;\nlet parsedChatData = { \n  messages: [],\n  sellers: {},\n  customers: {}\n};\n\n\ntry {\n  if (chatDataRaw && typeof chatDataRaw === 'string') {\n    parsedChatData = JSON.parse(chatDataRaw) || parsedChatData;\n  } else if (chatDataRaw && typeof chatDataRaw === 'object') {\n    parsedChatData = chatDataRaw;\n  }\n} catch (e) {\n  console.error(\"Error parsing chat data for dashboard:\", e);\n}\n\n\nif (!parsedChatData.messages) parsedChatData.messages = [];\nif (!parsedChatData.sellers) parsedChatData.sellers = {};\nif (!parsedChatData.customers) parsedChatData.customers = {};\n\n\nconst remoteJid = $('Armazenar Mensagens (Atualizado)').item.json.remoteJid;\n\nconst getDynamicName = (isFromMe, defaultName) => {\n    try {\n        if (isFromMe) {\n            return (parsedChatData.sellers && Object.values(parsedChatData.sellers)[0] ? \n                   Object.values(parsedChatData.sellers)[0].name : null) || defaultName;\n        } else {\n            return (parsedChatData.customers && Object.values(parsedChatData.customers)[0] ? \n                   Object.values(parsedChatData.customers)[0].name : null) || defaultName;\n        }\n    } catch (e) {\n        console.error(\"Error in getDynamicName for dashboard:\", e);\n        return defaultName;\n    }\n}\n\nconst conversationForIa = (parsedChatData.messages || []).map(msg => {\n  try {\n    const senderName = getDynamicName(msg.fromMe, msg.fromMe ? 'Vendedor' : 'Cliente');\n    let textContent = msg.text || '';\n    \n    if (msg.messageType === 'audio_transcribed' && msg.isTranscribed) {\n      textContent = msg.text;\n    } else if (msg.messageType === 'audio' && !msg.isTranscribed) {\n      textContent = '[MENSAGEM DE ÁUDIO]';\n    } else if (!msg.text && msg.messageType !== 'image' && \n               msg.messageType !== 'video' && msg.messageType !== 'sticker' && \n               msg.messageType !== 'document') {\n      textContent = '[MENSAGEM SEM TEXTO]';\n    }\n    \n    return `${senderName}: ${textContent}`;\n  } catch (e) {\n    console.error(\"Error processing message for dashboard IA:\", e, \"Message:\", msg);\n    return '[ERRO AO PROCESSAR MENSAGEM]';\n  }\n}).join('\\n');\n\nconst fullChatHistoryArray = (parsedChatData.messages || []).map(msg => {\n  try {\n    return {\n      sender: msg.fromMe ? 'Vendedor' : 'Cliente',\n      senderName: getDynamicName(msg.fromMe, msg.fromMe ? 'Vendedor' : 'Cliente'),\n      text: msg.text || (msg.messageType === 'audio' && !msg.isTranscribed ? '[AUDIO]' : \n            (msg.messageType !== 'conversation' && msg.messageType !== 'extendedTextMessage' && \n             msg.messageType !== 'audio_transcribed' ? `[${msg.messageType || 'MIDIA'}]` : \n             '[CONTEÚDO INDISPONÍVEL]')),\n      timestamp: msg.timestamp,\n      messageType: msg.messageType,\n      fromMe: msg.fromMe\n    };\n  } catch (e) {\n    console.error(\"Error formatting message for dashboard history:\", e);\n    return {\n      sender: 'Erro',\n      senderName: 'Erro',\n      text: '[ERRO AO FORMATAR MENSAGEM]',\n      timestamp: Date.now(),\n      messageType: 'error',\n      fromMe: false\n    };\n  }\n});\n\nreturn [{ \n  json: {\n    remoteJid: remoteJid,\n    conversation_for_ia: conversationForIa,\n    full_chat_history_array: fullChatHistoryArray,\n    raw_chat_data: parsedChatData \n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20280,
        5120
      ],
      "id": "36fea440-7ca5-4eb3-a466-a227ce78ed13",
      "name": "Formatar Histórico p/ Dashboard e IA"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você é um assistente de análise de conversas. Analise o seguinte histórico de chat:\nCONVERSA:\n{{ $json.conversation_for_ia }}\n\nCom base na conversa, gere um resumo conciso e identifique até 5 palavras-chave ou tópicos principais discutidos.\nRetorne APENAS um objeto JSON com as seguintes chaves:\n- \"resumo_chat\": (string) um parágrafo resumindo a conversa.\n- \"topicos_principais\": (array de strings) com as palavras-chave ou tópicos.\n\nExemplo de saída:\n{\n  \"resumo_chat\": \"O cliente entrou em contato para saber sobre o status do pedido X e o vendedor forneceu informações de rastreamento.\",\n  \"topicos_principais\": [\"status do pedido\", \"rastreamento\", \"pedido X\"]\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        20540,
        5120
      ],
      "id": "8a3fddb2-96ac-4af4-b31b-6fe71c7106ba",
      "name": "Analisar Chat p/ Dashboard (IA)"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        20500,
        5300
      ],
      "id": "39df2cb2-47ea-48ce-86aa-c92a84601275",
      "name": "OpenAI Chat Model (Dashboard)",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const agentOutputString = items[0].json.output; \nconst previousData = $('Formatar Histórico p/ Dashboard e IA').item.json;\nlet agentJson = {};\n\ntry {\n  let cleanJsonString = agentOutputString.replace(/^```json\\n?/, '').replace(/\\n?```$/, '');\n  agentJson = JSON.parse(cleanJsonString);\n} catch (e) {\n  console.error(\"Erro ao parsear JSON do agente para dashboard:\", e, \"String Original:\", agentOutputString);\n  agentJson = {\n    resumo_chat: \"Não foi possível gerar o resumo do chat.\",\n    topicos_principais: []\n  };\n}\n\n\nlet customerName = 'Desconhecido';\nlet customerNumber = previousData.remoteJid || 'Desconhecido'; \n\ntry {\n  \n  if (previousData.raw_chat_data && previousData.raw_chat_data.customers && Object.keys(previousData.raw_chat_data.customers).length > 0) {\n    \n    const firstCustomer = Object.values(previousData.raw_chat_data.customers)[0];\n    if (firstCustomer) {\n      customerName = firstCustomer.name || customerName; \n      customerNumber = firstCustomer.number || customerNumber; \n    }\n  }\n} catch (e) {\n  console.error(\"Erro ao extrair dados do cliente:\", e);\n  \n}\n\nconst customerData = {\n  name: customerName,\n  number: customerNumber\n};\n\n\n\n\n\nconst conversationObject = {\n  remoteJid: previousData.remoteJid || 'JID_DESCONHECIDO', \n  chat_history: previousData.full_chat_history_array || [], \n  analysis: {\n    summary: agentJson.resumo_chat || \"Resumo não fornecido pela IA.\",\n    keywords: Array.isArray(agentJson.topicos_principais) ? agentJson.topicos_principais : []\n  },\n  customer: customerData, \n  timestamp: new Date().toISOString()\n  \n};\n\n\nif (!conversationObject.remoteJid || conversationObject.remoteJid === 'JID_DESCONHECIDO') {\n  console.error(\"Objeto de conversa final sem remoteJid válido:\", conversationObject);\n  \n  \n}\n\n\n\n\n\n\nreturn [{ json: conversationObject }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        21000,
        5120
      ],
      "id": "966831e4-68ce-41a2-a40f-b7fe3f66d7ee",
      "name": "Formatar Saída Agente Dashboard"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "=dashboard_payload:{{ $json.remoteJid }}",
        "value": "={{ JSON.stringify($json) }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21220,
        5120
      ],
      "id": "bec97cb1-1612-41e3-956d-7953e403ecdf",
      "name": "Armazenar Saída Formatada Dashboard",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5e0b4011-da9c-4094-afb7-8e208d0329e1",
              "leftValue": "={{ $('Processar Mensagem').item.json.data.fromMe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20040,
        4940
      ],
      "id": "ace8464e-b478-4ddb-b99e-3205bdde8ddc",
      "name": "Verificar Mensagem Cliente"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "avaliacao_pendente",
        "key": "avaliacao:pendente:{{ $('Processar Mensagem').item.json.data.remoteJid }}",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        20280,
        4920
      ],
      "id": "c702e818-598a-40d3-8d55-5fa5d2769f35",
      "name": "Verificar Avaliação Pendente",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b73026c5-67be-4cc9-885e-205620a1356f",
              "leftValue": "={{ $json.avaliacao_pendente }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20540,
        4920
      ],
      "id": "fbcb76e3-b351-42b1-a5a7-c906510ec603",
      "name": "É Resposta Avaliação"
    },
    {
      "parameters": {
        "jsCode": "const texto = $('Processar Mensagem').first().json.data.text;\nconst nota = parseInt(texto.trim());\n\nif (!isNaN(nota) && nota >= 0 && nota <= 10) {\n  \n  return [\n    {\n      json: {\n        avaliacao_valida: true,\n        nota: nota,\n        remoteJid: $('Processar Mensagem').first().json.data.remoteJid\n      }\n    }\n  ];\n} else {\n  \n  return [\n    {\n      json: {\n        avaliacao_valida: false,\n        remoteJid: $('Processar Mensagem').first().json.data.remoteJid\n      }\n    }\n  ];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20800,
        4900
      ],
      "id": "37f8d960-1830-4612-81a4-cceed5aacaa3",
      "name": "Validar Nota Avaliação"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b73026c5-67be-4cc9-885e-205620a1356f",
              "leftValue": "={{ $json.avaliacao_valida }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        21020,
        4900
      ],
      "id": "73681e88-b17e-4c3a-9da1-1211e6def064",
      "name": "Verificar Nota Válida"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "avaliacao:nota:{{ $json.remoteJid }}",
        "value": "={{ $json.nota }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21260,
        4880
      ],
      "id": "15c04288-6697-4fb6-98f7-8b40bad177d7",
      "name": "Armazenar Nota Avaliação",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "avaliacao:pendente:{{ $json.remoteJid }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21540,
        4880
      ],
      "id": "8721148c-a75e-4067-9234-d47adb623597",
      "name": "Remover Pendência",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "historico_chat_raw",
        "key": "chat:{{ $json.remoteJid }}:full",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        21920,
        4880
      ],
      "id": "ed3193ae-dabc-4ccb-b3bc-b3f77e510a36",
      "name": "Obter Histórico Chat (Avaliação)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let historico = {};\ntry {\n  const chatObject = JSON.parse($('Obter Histórico Chat (Avaliação)').first().json.historico_chat_raw || '{}');\n  historico = chatObject;\n} catch (e) {\n  console.error(\"Erro ao parsear historico_chat_raw para avaliação:\", e);\n  historico = { messages: [], sellers: {}, customers: {} };\n}\n\nconst nota = $('Armazenar Nota Avaliação').first().json.nota;\nconst remoteJid = $('Validar Nota Avaliação').first().json.remoteJid;\n\nconst getSellerName = () => {\n  try {\n    if (historico.sellers && Object.keys(historico.sellers).length > 0) {\n      return Object.values(historico.sellers)[0].name || 'Vendedor';\n    }\n    return 'Vendedor (Não identificado)';\n  } catch (e) { return 'Vendedor (Erro ao identificar)'; }\n};\n\nconst getCustomerName = () => {\n  try {\n    if (historico.customers && Object.keys(historico.customers).length > 0) {\n      return Object.values(historico.customers)[0].name || 'Cliente';\n    }\n    return 'Cliente (Não identificado)';\n  } catch (e) { return 'Cliente (Erro ao identificar)'; }\n};\n\nlet chatFormatado = 'Nenhum histórico disponível';\ntry {\n  if (historico.messages && Array.isArray(historico.messages)) {\n    chatFormatado = historico.messages.map(msg => {\n      const remetente = msg.fromMe ? \n        `Vendedor (${getSellerName()})` : \n        `Cliente (${getCustomerName()})`;\n      const timestamp = msg.timestamp ? new Date(msg.timestamp * 1000).toISOString() : 'Data não disponível';\n      let textContent = msg.text || '';\n      if (msg.messageType === 'audio_transcribed' && msg.isTranscribed) {\n        textContent = msg.text;\n      } else if (msg.messageType === 'audio' && !msg.isTranscribed) {\n        textContent = '[MENSAGEM DE ÁUDIO]';\n      } else if (!msg.text) {\n        textContent = '[MENSAGEM SEM TEXTO]';\n      }\n      return `${remetente}: ${textContent} [${timestamp}]`;\n    }).join('\\n');\n  }\n} catch (e) {\n  console.error('Erro ao formatar mensagens para avaliação:', e);\n  chatFormatado = 'Erro ao formatar o histórico de mensagens para avaliação';\n}\n\nconst contexto = `\\n\\nCONTEXTO:\\n` +\n  `Vendedor: ${getSellerName()}\\n` +\n  `Cliente: ${getCustomerName()}\\n` +\n  `Número do Cliente: ${remoteJid || 'Não identificado'}\\n`;\n\nreturn [\n  {\n    json: {\n      historico_formatado: chatFormatado + contexto,\n      nota_avaliacao: nota,\n      remoteJid: remoteJid,\n      contexto_completo: historico\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        22120,
        4880
      ],
      "id": "47407d41-baff-4aac-bd50-e12bd9e9cad0",
      "name": "Formatar Histórico (Avaliação)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você é um assistente especializado em análise de atendimento ao cliente. Analise a conversa abaixo entre um vendedor e um cliente. O cliente deu uma nota {{$json.nota_avaliacao}} (de 0 a 10) para o atendimento.\n\nCONVERSA:\n{{$json.historico_formatado}}\n\nCom base na conversa e na nota dada pelo cliente {{ $json.remoteJid }}, crie um formulário de avaliação de desempenho do vendedor no formato JSON com os seguintes campos:\n\n1. nota_cliente: a nota numérica dada pelo cliente ({{$json.nota_avaliacao}})\n2. pontos_fortes: array com 3 pontos fortes identificados no atendimento\n3. pontos_fracos: array com 3 pontos que podem ser melhorados\n4. tempo_resposta: avaliação do tempo de resposta (\"Excelente\", \"Bom\", \"Regular\" ou \"Ruim\")\n5. clareza_comunicacao: avaliação da clareza na comunicação (\"Excelente\", \"Bom\", \"Regular\" ou \"Ruim\")\n6. resolucao_problema: avaliação da capacidade de resolver o problema (\"Excelente\", \"Bom\", \"Regular\" ou \"Ruim\")\n7. sugestoes_melhoria: array com 2 sugestões concretas para melhorar o atendimento\n8. resumo_atendimento: um parágrafo resumindo o atendimento\n9. contexto_conversa: um resumo do contexto geral da conversa\n\nRetorne APENAS o objeto JSON, sem explicações adicionais.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        22400,
        4880
      ],
      "id": "c1ca82ae-2153-4300-9dc6-d8d180b191d0",
      "name": "Analisar Atendimento"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        22400,
        5140
      ],
      "id": "dcff1c5d-42b1-4cc6-8a9c-b21c84e8f957",
      "name": "OpenAI Chat Model (Avaliação)",
      "credentials": {
        "openAiApi": {
          "id": "mKkCNH6DQU9B3zlU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const stringJsonComBloco = items[0].json.output;\nlet jsonExtraido = stringJsonComBloco;\n\n\nif (typeof jsonExtraido === 'string') {\n  if (jsonExtraido.startsWith('```json\\n')) {\n    jsonExtraido = jsonExtraido.substring(7);\n  } else if (jsonExtraido.startsWith('```json')) {\n    jsonExtraido = jsonExtraido.substring(6);\n  } else if (jsonExtraido.startsWith('```')) {\n    jsonExtraido = jsonExtraido.substring(3);\n  }\n\n  if (jsonExtraido.endsWith('\\n```')) {\n    jsonExtraido = jsonExtraido.substring(0, jsonExtraido.length - 4);\n  } else if (jsonExtraido.endsWith('```')) {\n    jsonExtraido = jsonExtraido.substring(0, jsonExtraido.length - 3);\n  }\n  jsonExtraido = jsonExtraido.trim();\n}\n\nlet objetoJson;\ntry {\n  \n  if (typeof jsonExtraido === 'string') {\n    objetoJson = JSON.parse(jsonExtraido);\n  } else if (typeof jsonExtraido === 'object' && objetoJson !== null) {\n    objetoJson = jsonExtraido;\n  } else {\n    throw new Error(\"Não foi possível determinar o formato do JSON para parse.\");\n  }\n} catch (error) {\n  console.error(\"Erro ao fazer parse do JSON extraído: \", error.message);\n  console.error(\"JSON extraído que causou o erro: \", jsonExtraido);\n  return [{ json: { error: \"Falha ao analisar o JSON do LLM\", details: error.message, problematicJsonString: String(jsonExtraido) } }];\n}\n\n\nobjetoJson.nota_cliente = objetoJson.nota_cliente !== undefined && !isNaN(Number(objetoJson.nota_cliente)) ? Number(objetoJson.nota_cliente) : 0;\nobjetoJson.pontos_fortes = Array.isArray(objetoJson.pontos_fortes) ? objetoJson.pontos_fortes : [];\nobjetoJson.pontos_fracos = Array.isArray(objetoJson.pontos_fracos) ? objetoJson.pontos_fracos : [];\nobjetoJson.sugestoes_melhoria = Array.isArray(objetoJson.sugestoes_melhoria) ? objetoJson.sugestoes_melhoria : [];\n\nobjetoJson.tempo_resposta = String(objetoJson.tempo_resposta || \"Não informado\");\nobjetoJson.clareza_comunicacao = String(objetoJson.clareza_comunicacao || \"Não informado\");\nobjetoJson.resolucao_problema = String(objetoJson.resolucao_problema || \"Não informado\");\nobjetoJson.resumo_atendimento = String(objetoJson.resumo_atendimento || \"Não informado\");\nobjetoJson.contexto_conversa = String(objetoJson.contexto_conversa || \"Não informado\");\n\n\nlet remoteJidValue = \"Não informado\";\ntry {\n  const formatarHistoricoNodeOutput = $('Formatar Histórico (Avaliação)').item.json;\n  if (formatarHistoricoNodeOutput && formatarHistoricoNodeOutput.remoteJid) {\n    remoteJidValue = formatarHistoricoNodeOutput.remoteJid;\n    objetoJson.remoteJid = remoteJidValue;\n    objetoJson.contexto_completo = formatarHistoricoNodeOutput.contexto_completo || {};\n  }\n} catch (e) {\n  console.warn(\"Não foi possível obter remoteJid de nós anteriores. Erro:\", e.message);\n}\n\n\nconst jsonFormatadoLegivel = JSON.stringify(objetoJson, null, 2);\n\n\nreturn [{ json: { formulario_formatado: jsonFormatadoLegivel, raw_formulario: objetoJson } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        22900,
        4880
      ],
      "id": "e97f97c5-a0b7-43bc-a682-9e5f744626ef",
      "name": "Formatar Formulário (Avaliação)"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "avaliacao:formulario:{{ $('Formatar Histórico (Avaliação)').item.json.remoteJid }}",
        "value": "={{ $('Formatar Formulário (Avaliação)').item.json.formulario_formatado }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        23220,
        4880
      ],
      "id": "057c5894-63c2-40df-b1ba-53532cee8a57",
      "name": "Armazenar Formulário (Avaliação)",
      "credentials": {
        "redis": {
          "id": "N86fzX8xrhosKiMf",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=[https://projeto-n8n.vercel.app/api/receber-avaliacao/](https://projeto-n8n.vercel.app/api/receber-avaliacao/){{ $('Processar Mensagem').item.json.data.userWebhookApiKey }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $('Formatar Formulário (Avaliação)').item.json.formulario_formatado }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        23520,
        4880
      ],
      "id": "a2440565-a4e0-4deb-afa1-dabc07a66cab",
      "name": "Notificar Conclusão Avaliação"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://projeto-n8n.vercel.app/api/conversas/b512c2f00becd4c97e4a7b01eac6ce8e",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.chat_history }}",
        "options": {}
      },
      "name": "Enviar Conversas Formatadas para API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        21220,
        5320
      ],
      "id": "f484b25f-b0d9-4e17-8729-5c3a1b8c3ba5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "Obrigado pela sua avaliação! Sua nota foi registrada com sucesso."
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        21740,
        4880
      ],
      "id": "2180c225-0d56-47da-8f2e-378dc5a43b62",
      "name": "Confirmar Avaliação Cliente"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        19040,
        4300
      ],
      "id": "0fd7a677-4cfa-4e5b-9413-33872e70e34d",
      "name": "Wait",
      "webhookId": "088b94eb-d737-44ce-bcde-69829a47a678"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Processar Mensagem').item.json.evo.server_url }}/message/sendText/{{ $('Processar Mensagem').item.json.evo.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $('Processar Mensagem').item.json.evo.apikey }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number",
              "value": "={{ $('IF: Erro no Parse?').item.json.remoteJid }}"
            },
            {
              "name": "text",
              "value": "={{ $('IF: Erro no Parse?').item.json.error_message }}"
            }
          ]
        },
        "options": {}
      },
      "id": "244e4d56-9da9-4a21-890d-449addace85e",
      "name": "HTTP Request: Enviar Msg (Erro Formato)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        19820,
        4400
      ]
    },
    {
      "parameters": {
        "jsCode": "const text = $json.data.text;\nconst parts = text.split(';');\nlet response = {};\n\nif (parts.length === 4) {\n  const [name, email, password, identifier] = parts.map(part => part.trim());\n  \n  \n  if (name && email && password && identifier && email.includes('@')) {\n    response = {\n      parse_error: false,\n      registration_data: {\n        name: name,\n        email: email,\n        password: password,\n        identifier: identifier\n      }\n    };\n  } else {\n    response = {\n      parse_error: true,\n      error_message: 'Dados inválidos ou incompletos. Verifique o formato: Nome;Email;Senha;CPF/CNPJ'\n    };\n  }\n} else {\n  response = {\n    parse_error: true,\n    error_message: 'Formato inválido. Use: Nome;Email;Senha;CPF/CNPJ'\n  };\n}\n\n\nresponse.remoteJid = $json.data.remoteJid;\n\nreturn [{ json: response }];"
      },
      "id": "79fa7a7c-31c8-42fe-b9a8-eb32cc106e39",
      "name": "Code: Parse Dados Cadastro",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        19320,
        4520
      ]
    }
  ],
  "pinData": {
    "Webhook Entrada": [
      {
        "json": {
          "headers": {
            "host": "n8n-n8n.lwr5mp.easypanel.host",
            "user-agent": "axios/1.7.9",
            "content-length": "957",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "172.18.0.1",
            "x-forwarded-host": "n8n-n8n.lwr5mp.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "f0c35f83d344",
            "x-real-ip": "172.18.0.1"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Paulo Henrique",
            "data": {
              "key": {
                "remoteJid": "556186446934@s.whatsapp.net",
                "fromMe": true,
                "id": "D5AD74E28D66EDA039B3D7DDA8CEE880"
              },
              "pushName": "Henrique",
              "status": "SERVER_ACK",
              "message": {
                "messageContextInfo": {
                  "messageSecret": "6ZXf6kJEtryyXptBFy8dxurVQTO8xHY0gEib+/XdxQg="
                },
                "conversation": "Paulo Henrique; paulohenrique.012araujo@gmail.com;password;05814436166"
              },
              "contextInfo": {
                "entryPointConversionSource": "global_search_new_chat",
                "entryPointConversionApp": "whatsapp",
                "entryPointConversionDelaySeconds": 5567
              },
              "messageType": "conversation",
              "messageTimestamp": 1746728043,
              "instanceId": "d54b371c-67ed-4c0d-82d9-6b66dea0c990",
              "source": "android"
            },
            "destination": "https://n8n-n8n.lwr5mp.easypanel.host/webhook/avaliacao-atendimento-webhook",
            "date_time": "2025-05-08T15:14:03.890Z",
            "sender": "556186446934@s.whatsapp.net",
            "server_url": "https://evolution-evolution.lwr5mp.easypanel.host",
            "apikey": "948D0A6EDFA1-4BC3-AFFD-70CE70DD89D7"
          },
          "webhookUrl": "https://n8n-n8n.lwr5mp.easypanel.host/webhook/avaliacao-atendimento-webhook",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook Entrada": {
      "main": [
        [
          {
            "node": "Processar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Mensagem": {
      "main": [
        [
          {
            "node": "IF: Mensagem do Dono?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Verificar se é Áudio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar se é Áudio": {
      "main": [
        [
          {
            "node": "Baixar Arquivo de Áudio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Filtrar Chats Individuais",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atualizar Mensagem com Transcrição": {
      "main": [
        [
          {
            "node": "Aguardar Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar Chats Individuais": {
      "main": [
        [
          {
            "node": "Aguardar Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aguardar Mensagens": {
      "main": [
        [
          {
            "node": "Agrupar e Format Mensagens",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agrupar e Format Mensagens": {
      "main": [
        [
          {
            "node": "Obter Histórico de Chat Existente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Histórico de Chat Existente": {
      "main": [
        [
          {
            "node": "Anexar Novas Mensagens ao Histórico de Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anexar Novas Mensagens ao Histórico de Chat": {
      "main": [
        [
          {
            "node": "Armazenar Mensagens (Atualizado)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Mensagens (Atualizado)": {
      "main": [
        [
          {
            "node": "Verificar Mensagem Cliente",
            "type": "main",
            "index": 0
          },
          {
            "node": "Obter Conversa Completa p/ Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Mensagem Cliente": {
      "main": [
        [
          {
            "node": "Verificar Avaliação Pendente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Avaliação Pendente": {
      "main": [
        [
          {
            "node": "É Resposta Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "É Resposta Avaliação": {
      "main": [
        [
          {
            "node": "Validar Nota Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Nota Avaliação": {
      "main": [
        [
          {
            "node": "Verificar Nota Válida",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Nota Válida": {
      "main": [
        [
          {
            "node": "Armazenar Nota Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Nota Avaliação": {
      "main": [
        [
          {
            "node": "Remover Pendência",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remover Pendência": {
      "main": [
        [
          {
            "node": "Confirmar Avaliação Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Histórico Chat (Avaliação)": {
      "main": [
        [
          {
            "node": "Formatar Histórico (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Histórico (Avaliação)": {
      "main": [
        [
          {
            "node": "Analisar Atendimento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar Atendimento": {
      "main": [
        [
          {
            "node": "Formatar Formulário (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model (Avaliação)": {
      "ai_languageModel": [
        [
          {
            "node": "Analisar Atendimento",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Formulário (Avaliação)": {
      "main": [
        [
          {
            "node": "Armazenar Formulário (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Formulário (Avaliação)": {
      "main": [
        [
          {
            "node": "Notificar Conclusão Avaliação",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obter Conversa Completa p/ Dashboard": {
      "main": [
        [
          {
            "node": "Formatar Histórico p/ Dashboard e IA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Histórico p/ Dashboard e IA": {
      "main": [
        [
          {
            "node": "Analisar Chat p/ Dashboard (IA)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar Chat p/ Dashboard (IA)": {
      "main": [
        [
          {
            "node": "Formatar Saída Agente Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model (Dashboard)": {
      "ai_languageModel": [
        [
          {
            "node": "Analisar Chat p/ Dashboard (IA)",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Baixar Arquivo de Áudio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Saída Agente Dashboard": {
      "main": [
        [
          {
            "node": "Armazenar Saída Formatada Dashboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Confirmar Avaliação Cliente": {
      "main": [
        [
          {
            "node": "Obter Histórico Chat (Avaliação)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Mensagem do Dono?": {
      "main": [
        [
          {
            "node": "IF: É comando /setup?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: É comando /setup?": {
      "main": [
        [
          {
            "node": "Redis GET: Verificar Chave API Existente",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF: É resposta de cadastro?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis GET: Verificar Chave API Existente": {
      "main": [
        [
          {
            "node": "IF: Já Registrado?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Já Registrado?": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Já Registrado)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Pedir Dados Cadastro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: É resposta de cadastro?": {
      "main": [
        [
          {
            "node": "Code: Parse Dados Cadastro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Erro no Parse?": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Erro Formato)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Chamar API Register",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request: Chamar API Register": {
      "main": [
        [
          {
            "node": "Code: Processar Resposta API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Processar Resposta API": {
      "main": [
        [
          {
            "node": "IF: Registro OK?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Registro OK?": {
      "main": [
        [
          {
            "node": "Redis SET: Salvar API Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request: Enviar Msg (Erro API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis SET: Salvar API Key": {
      "main": [
        [
          {
            "node": "HTTP Request: Enviar Msg (Sucesso)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Armazenar Saída Formatada Dashboard": {
      "main": [
        [
          {
            "node": "Enviar Conversas Formatadas para API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Atualizar Mensagem com Transcrição",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request: Pedir Dados Cadastro": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "IF: É resposta de cadastro?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Parse Dados Cadastro": {
      "main": [
        [
          {
            "node": "IF: Erro no Parse?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f25cc1f5-b641-4324-b0fb-1cdf8c05f2eb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "13bc83b253b227bcad46beb8869279f45f1be61c89bdea526a2d396efe853401"
  },
  "id": "nbhszVoGfRJ9VRmt",
  "tags": [
    {
      "createdAt": "2025-05-08T16:29:17.295Z",
      "updatedAt": "2025-05-08T16:29:17.295Z",
      "id": "44ya8b4dNQRNR52f",
      "name": "owner-registration"
    },
    {
      "createdAt": "2025-05-07T12:52:01.478Z",
      "updatedAt": "2025-05-07T12:52:01.478Z",
      "id": "AknaoY9DgpcxL0H0",
      "name": "dashboard-chat"
    },
    {
      "createdAt": "2025-05-02T20:44:26.750Z",
      "updatedAt": "2025-05-02T20:44:26.750Z",
      "id": "HJh2aycXpkW4R6K1",
      "name": "evolution-api"
    },
    {
      "createdAt": "2025-05-07T12:52:01.473Z",
      "updatedAt": "2025-05-07T12:52:01.473Z",
      "id": "I8lZORu9kLFyvast",
      "name": "audio-transcription"
    },
    {
      "createdAt": "2025-05-02T19:16:14.348Z",
      "updatedAt": "2025-05-02T19:16:14.348Z",
      "id": "TiEqPiDEbKjRurRg",
      "name": "evaluation"
    },
    {
      "createdAt": "2025-05-02T19:16:14.335Z",
      "updatedAt": "2025-05-02T19:16:14.335Z",
      "id": "VSbAyMF7ZHJmXGRs",
      "name": "chat"
    },
    {
      "createdAt": "2025-05-02T19:16:14.343Z",
      "updatedAt": "2025-05-02T19:16:14.343Z",
      "id": "nrXOO1OLR4Csgx6x",
      "name": "whatsapp"
    }
  ]
}